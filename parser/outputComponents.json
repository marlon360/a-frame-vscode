{
  "app": {
    "name": "markdown-json",
    "cwd": "./",
    "src": "node_modules/aframe/docs/components/",
    "filePattern": "*.md",
    "ignore": "test",
    "dist": "parser/outputComponents.json",
    "server": false,
    "port": 3001,
    "version": "1.5.0"
  },
  "data": [
    {
      "id": "animation",
      "contents": "<p>The animation component lets us animate and tween values including:</p>\n<ul>\n<li>Component values (e.g., <code>position</code>, <code>visible</code>)</li>\n<li>Component property values (e.g., <code>light.intensity</code>)</li>\n</ul>\n<p>We can also tween values directly for better performance versus going through\n<code>.setAttribute</code>, such as by animating values:</p>\n<ul>\n<li>On the <code>object3D</code> (e.g., <code>object3D.position.y</code>, <code>object3D.rotation.z</code>)</li>\n<li>Directly within a component (e.g., <code>components.material.material.color</code>, <code>components.text.material.uniforms.opacity.value</code>),</li>\n</ul>\n<p>For example, translating a box:</p>\n<pre><code class=\"language-html\">&lt;a-box position=&quot;-1 1.6 -5&quot; animation=&quot;property: position; to: 1 8 -10; dur: 2000; easing: linear; loop: true&quot; color=&quot;tomato&quot;&gt;&lt;/a-box&gt;</code></pre>\n<p>Or orbiting a sphere in a 5-meter radius:</p>\n<pre><code class=\"language-html\">&lt;a-entity rotation=&quot;0 0 0&quot; animation=&quot;property: rotation; to: 0 360 0; loop: true; dur: 10000&quot;&gt;\n        &lt;a-sphere position=&quot;5 0 0&quot; color=&quot;mediumseagreen&quot;&gt;&lt;/a-sphere&gt;\n&lt;/a-entity&gt;</code></pre>\n<p>Read more below for additional options and discovering how to properly animate\ndifferent types of values.</p>\n<!--toc-->\n\n<h2 id=\"api\">API</h2>\n<h3 id=\"properties\">Properties</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n<th>Values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>property</td>\n<td>Property to animate. Can be a component name, a dot-delimited property of a component (e.g., <code>material.color</code>), or a plain attribute.</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>isRawProperty</td>\n<td>Flag to animate an arbitrary object property outside of A-Frame components for better performance. If set to true, for example, we can set <code>property</code> to like <code>components.material.material.opacity</code>. If <code>property</code> starts with <code>components</code> or <code>object3D</code>, this will be inferred to <code>true</code>.</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>from</td>\n<td>Initial value at start of animation. If not specified, the current property value of the entity will be used (will be sampled on each animation start). It is best to specify a <code>from</code> value when possible for stability.</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>to</td>\n<td>Target value at end of animation.</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>type</td>\n<td>Right now only supports <code>color</code> for tweening <code>isRawProperty</code> color XYZ/RGB vector  values.</td>\n<td>&#39;&#39;</td>\n<td></td>\n</tr>\n<tr>\n<td>delay</td>\n<td>How long (milliseconds) to wait before starting.</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>dir</td>\n<td>Which dir to go from <code>from</code> to <code>to</code>.</td>\n<td>normal</td>\n<td>alternate, reverse</td>\n</tr>\n<tr>\n<td>dur</td>\n<td>How long (milliseconds) each cycle of the animation is.</td>\n<td>1000</td>\n<td></td>\n</tr>\n<tr>\n<td>easing</td>\n<td>Easing function of animation. To ease in, ease out, ease in and out.</td>\n<td>easeInQuad</td>\n<td>See <a href=\"#easings\">easings</a></td>\n</tr>\n<tr>\n<td>elasticity</td>\n<td>How much to bounce (higher is stronger).</td>\n<td>400</td>\n<td></td>\n</tr>\n<tr>\n<td>loop</td>\n<td>How many times the animation should repeat. If the value is <code>true</code>, the animation will repeat infinitely.</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>round</td>\n<td>Whether to round values.</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>startEvents</td>\n<td>Comma-separated list of events to listen to trigger a restart and play. Animation will not autoplay if specified. <code>startEvents</code> will <strong>restart</strong> the animation, use <code>pauseEvents</code> to resume it. If there are other animation components on the entity animating the same property, those animations will be automatically paused to not conflict.</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>pauseEvents</td>\n<td>Comma-separated list of events to listen to trigger pause. Can be resumed with <code>resumeEvents</code>.</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>resumeEvents</td>\n<td>Comma-separated list of events to listen to trigger resume after pausing.</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td>Whether or not the animation should <code>autoplay</code>. Should be specified if the animation is defined for the <a href=\"https://www.npmjs.com/package/aframe-animation-timeline-component\"><code>animation-timeline</code> component</a>.</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>If disabled, animation will stop and startEvents will not trigger animation start.</td>\n<td>true</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"multiple-animations\">Multiple Animations</h3>\n<p>The component&#39;s base name is <code>animation</code>. We can attach multiple animations to\none entity by name-spacing the component with double underscores (<code>__</code>):</p>\n<pre><code class=\"language-html\">&lt;a-entity animation=&quot;property: rotation&quot;\n          animation__2=&quot;property: position&quot;\n          animation__color=&quot;property: material.color&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h3 id=\"easings\">Easings</h3>\n<p>Easings define the accelerations and speed throughout the cycle of the\nanimation.</p>\n<table>\n<thead>\n<tr>\n<th>easeIn</th>\n<th>easeOut</th>\n<th>easeInOut</th>\n<th>Others</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>easeInQuad</td>\n<td>easeOutQuad</td>\n<td>easeInOutQuad</td>\n<td>linear</td>\n</tr>\n<tr>\n<td>easeInCubic</td>\n<td>easeOutCubic</td>\n<td>easeInOutCubic</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInQuart</td>\n<td>easeOutQuart</td>\n<td>easeInOutQuart</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInQuint</td>\n<td>easeOutQuint</td>\n<td>easeInOutQuint</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInSine</td>\n<td>easeOutSine</td>\n<td>easeInOutSine</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInExpo</td>\n<td>easeOutExpo</td>\n<td>easeInOutExpo</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInCirc</td>\n<td>easeOutCirc</td>\n<td>easeInOutCirc</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInBack</td>\n<td>easeOutBack</td>\n<td>easeInOutBack</td>\n<td></td>\n</tr>\n<tr>\n<td>easeInElastic</td>\n<td>easeOutElastic</td>\n<td>easeInOutElastic</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"events\">Events</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>animationbegin</td>\n<td>Animation began. Event detail contains <code>name</code> of animation.</td>\n</tr>\n<tr>\n<td>animationcomplete</td>\n<td>Animation completed. Event detail contains <code>name</code> of animation.</td>\n</tr>\n<tr>\n<td>animationcomplete__<id></td>\n<td>Animation completed if animation has an ID (e.g., <code>animation__click</code>).</td>\n</tr>\n</tbody></table>\n<h3 id=\"members\">Members</h3>\n<p>Accessed as <code>el.components.animation.&lt;MEMBER&gt;</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>animation</td>\n<td>anime.js object.</td>\n</tr>\n<tr>\n<td>config</td>\n<td>Config passed to anime.js.</td>\n</tr>\n</tbody></table>\n<h2 id=\"animating-on-events\">Animating on Events</h2>\n<p>We can use the <code>startEvents</code> property to animate upon events:</p>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;mouseCursor&quot; cursor=&quot;rayOrigin: mouse&quot;&gt;&lt;/a-entity&gt;\n\n&lt;a-entity\n  geometry=&quot;primitive: box&quot;\n  material=&quot;color: red&quot;\n  animation__mouseenter=&quot;property: components.material.material.color; type: color; to: blue; startEvents: mouseenter; dur: 500&quot;;\n  animation__mouseleave=&quot;property: components.material.material.color; type: color; to: red; startEvents: mouseleave; dur: 500&quot;;</code></pre>\n<p><a href=\"https://glitch.com/edit/#!/aframe-animation-events?path=index.html:1:0\">Remix the Animating on Events Glitch</a>.</p>\n<h2 id=\"animating-different-types-of-values\">Animating Different Types of Values</h2>\n<p>We&#39;ll go over different cases of animating different types of values.</p>\n<h3 id=\"component-values\">Component Values</h3>\n<p>We can animate a single-property component value (e.g., <code>property: visible</code>,\nwe&#39;ll go over booleans in a bit) or animate a property of a multi-property\ncomponent using a dot <code>.</code> as a separator (e.g., <code>property: light.intensity</code>,\n<code>property: material.color</code>).</p>\n<p>If the property is a <code>vec3</code>, that is also supported (e.g., <code>property:\nsomeComponent.vec3Value; to: 5 5 5</code>).</p>\n<p>However, animating component values this way is not the most optimal way as it\nwill invoke <code>.setAttribute</code> on each frame of the animation. For an animation\nhere or there, it won&#39;t be a big deal, but we can save time and memory by\nanimating values directly.</p>\n<p>A special note to try not to animate values of the <code>geometry</code> component as that\nwill recreate the geometry on each tick. Rather animate <code>scale</code> if we want to\nanimate the size.</p>\n<h3 id=\"boolean-values\">Boolean Values</h3>\n<p>We can &quot;animate&quot; boolean values where the <code>to</code> value will be applied at the end\nof the animation. Like <code>property: visible; from: false; to: true; dur: 1</code>.</p>\n<h3 id=\"direct-values-through-object3d-and-components\">Direct Values through <code>object3D</code> and <code>components</code></h3>\n<p>The animation component supports animating values directly through <code>object3D</code>\nor <code>components</code>.</p>\n<p>For example, we can animate values on <code>object3D</code> like <code>property:\nobject3D.position.z; to: 5</code> which will tween the entity&#39;s <code>object3D.position.z</code>\nvalue directly without calling <code>.setAttribute</code>; it&#39;s the most direct way and\nlets us animate a single axis at a time. Note, for <code>object3D.rotation</code>, degrees\nare used.</p>\n<p>Or we can animate values by reaching into <code>components</code>. For example, rather than\nanimating <code>property: material.opacity</code> which would call <code>.setAttribute</code> on each\nframe, we can animate the opacity value directly with <code>property:\ncomponents.material.material.opacity</code>. We use a dot-delimited path to walk the\nobject tree to find the value we want to animate, and the animation process\nunder the hood reduces down to changing a number.</p>\n<h4 id=\"direct-color-values\">Direct Color Values</h4>\n<p>We can animate three.js color values directly, but we&#39;ll need to specify <code>type:\ncolor</code>. So rather than animating <code>property: material.color</code>, we can do\n<code>property: components.material.material.color; type: color</code>.</p>\n<p>A note on color values, we can specify color values using hex, color names,\nhsl, or rgb (e.g., <code>from: red; to: #FFCCAA</code> or <code>from: rgb(100, 100, 100); to:\nhsl(213, 100%, 70%)</code>)..</p>\n<h2 id=\"using-animejs-directly\">Using anime.js Directly</h2>\n<p>anime is a popular and powerful animation engine. The component prefers to do\njust basic tweening and touches the surface of what anime can do (e.g.,\ntimelines, motion paths, progress, seeking). If we need more animation\nfeatures, create a separate component that invokes anime.js directly. anime is\naccessible via <strong><code>AFRAME.ANIME</code></strong>.</p>\n<p>Read through and explore the <a href=\"https://github.com/juliangarnier/anime\">anime.js\ndocumentation</a> and\n<a href=\"https://animejs.com\">website</a>.</p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/aframe-animation-timeline-component\">animation-timeline component</a></li>\n</ul>\n",
      "title": "Animation",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/animation.js",
      "examples": [
        {
          "title": "Animating on Events",
          "src": "https://glitch.com/edit/#!/aframe-animation-events?path=index.html:1:0"
        },
        {
          "title": "Generated Animations",
          "src": "https://glitch.com/~aframe-shooting-stars"
        }
      ],
      "excerpt": "<p>The animation component lets us animate and tween values including:</p>"
    },
    {
      "id": "camera",
      "contents": "<p>The camera component defines from which perspective the user views the scene.\nThe camera is commonly paired with controls components that allow input devices\nto move and rotate the camera.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>A camera should usually be positioned at the average height of human eye level\n(1.6 meters). When used with controls that receive rotation or position (e.g.\nfrom a VR device) this position will be overridden.</p>\n<pre><code class=\"language-html\">&lt;a-entity camera look-controls position=&quot;0 1.6 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>When moving or rotating the camera relative to the scene, use a camera rig.\nBy doing so, the camera&#39;s height offset can be updated by roomscale devices,\nwhile still allowing the tracked area to be moved independently around the\nscene.</p>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;rig&quot; position=&quot;25 10 0&quot;&gt;\n  &lt;a-entity id=&quot;camera&quot; camera look-controls&gt;&lt;/a-entity&gt;\n&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>active</td>\n<td>Whether the camera is the active camera in a scene with more than one camera.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>far</td>\n<td>Camera frustum far clipping plane.</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>fov</td>\n<td>Field of view (in degrees).</td>\n<td>80</td>\n</tr>\n<tr>\n<td>near</td>\n<td>Camera frustum near clipping plane.</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>spectator</td>\n<td>Whether the camera is used to render a third-person view of the scene on the 2D display while in VR mode.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>zoom</td>\n<td>Zoom factor of the camera.</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h2 id=\"default-camera\">Default Camera</h2>\n<p>If a camera is not specified, A-Frame will inject a default camera:</p>\n<pre><code class=\"language-html\">&lt;a-entity camera=&quot;active: true&quot; look-controls wasd-controls position=&quot;0 1.6 0&quot; data-aframe-default-camera&gt;&lt;/a-entity&gt;</code></pre>\n<p>If a camera is specified (e.g., our own <code>&lt;a-camera&gt;</code> or <code>&lt;a-entity camera&gt;</code>),\nthen the default camera will not be added.</p>\n<h2 id=\"vr-behavior\">VR Behavior</h2>\n<p>When exiting VR, the camera will restore its rotation to its rotation <em>before</em>\nit entered VR. This is so when we exit VR, the rotation of the camera is back\nto normal for a desktop screen.</p>\n<p>Far, near, fov, zoom properties only apply in 2D and magic window modes. \nIn VR mode the camera parameters are supplied by the WebVR / WebXR API to match IPD and headset FOV. Those aren&#39;t configurable. </p>\n<h2 id=\"changing-the-active-camera\">Changing the Active Camera</h2>\n<p>When the <code>active</code> property gets toggled, the component will notify the camera system\nto change the current camera used by the renderer:</p>\n<pre><code class=\"language-js\">var secondCameraEl = document.querySelector(&#39;#second-camera&#39;);\nsecondCameraEl.setAttribute(&#39;camera&#39;, &#39;active&#39;, true);</code></pre>\n<h2 id=\"fixing-entities-to-the-camera\">Fixing Entities to the Camera</h2>\n<p>To fix entities onto the camera such that they stay within view no matter where\nthe user looks, you can attach those entities as a child of the camera. Use\ncases might be a heads-up display (HUD).</p>\n<pre><code class=\"language-html\">&lt;a-entity camera look-controls&gt;\n  &lt;a-entity geometry=&quot;primitive: plane; height: 0.2; width: 0.2&quot; position=&quot;0 0 -1&quot;\n            material=&quot;color: gray; opacity: 0.5&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-entity&gt;</code></pre>\n<p>Note that you should use HUDs sparingly as they cause irritation and eye strain\nin VR. Consider integrating menus into the fabric of the world itself. If you\ndo create a HUD, make sure that the HUD is more in the center of the field of\nview such that the user does not have to strain their eyes to read it.</p>\n<h2 id=\"reading-position-or-rotation-of-the-camera\">Reading Position or Rotation of the Camera</h2>\n<p>To actively read the position or rotation of the camera, use a <code>tick</code> handler\nof a component that reads the position or rotation, and does something with it.\nThen attach the component to the camera.</p>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;rotation-reader&#39;, {\n  tick: function () {\n    // `this.el` is the element.\n    // `object3D` is the three.js object.\n\n    // `rotation` is a three.js Euler using radians. `quaternion` also available.\n    console.log(this.el.object3D.rotation);\n\n    // `position` is a three.js Vector3.\n    console.log(this.el.object3D.position);\n  }\n});\n\n// &lt;a-entity camera look-controls rotation-reader&gt;</code></pre>\n<h3 id=\"reading-world-position-or-rotation-of-the-camera\">Reading World Position or Rotation of the Camera</h3>\n<p>three.js has methods to attain position or rotation (or scale) in world space\nversus object local space.</p>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;rotation-reader&#39;, {\n  /**\n   * We use IIFE (immediately-invoked function expression) to only allocate one\n   * vector or euler and not re-create on every tick to save memory.\n   */\n  tick: (function () {\n    var position = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n\n    return function () {\n      this.el.object3D.getWorldPosition(position);\n      this.el.object3D.getWorldQuaternion(quaternion);\n      // position and rotation now contain vector and quaternion in world space.\n    };\n  })\n});</code></pre>\n",
      "title": "camera",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/camera.js",
      "examples": [],
      "excerpt": "<p>The camera component defines from which perspective the user views the scene.\nThe camera is commonly paired with controls components that allow input devices\nto move and rotate the camera.</p>"
    },
    {
      "id": "daydream-controls",
      "contents": "<p>The daydream-controls component interfaces with the Google Daydream controllers.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Daydream controller model that highlights the touched\nand/or pressed buttons (trackpad).</p>\n<p>As a first time set up, to use the Daydream controller on Chrome for Android\nenable both <code>WebVR</code> and <code>Gamepad Extensions</code> experiments in <code>chrome://flags</code>\nand relaunch the browser.</p>\n<p>Then, open your web app, enter VR mode and place the phone inside the headset.\nIt can occassionally take a few seconds before the controller can be used.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;!-- Match Daydream controller if present, regardless of hand. --&gt;\n&lt;a-entity daydream-controls&gt;&lt;/a-entity&gt;</code></pre>\n<pre><code class=\"language-html\">&lt;!-- Match Daydream controller if present and for specified hand. --&gt;\n &lt;a-entity daydream-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n &lt;a-entity daydream-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>armModel</td>\n<td>Whether the arm model is used for positional data.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>buttonColor</td>\n<td>Button colors when not pressed.</td>\n<td>#000000</td>\n</tr>\n<tr>\n<td>buttonTouchedColor</td>\n<td>Button colors when touched.</td>\n<td>#777777</td>\n</tr>\n<tr>\n<td>buttonHighlightColor</td>\n<td>Button colors when pressed and active.</td>\n<td>#FFFFFF</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>Set hand that will be tracked (i.e., right, left).</td>\n<td></td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the Daydream controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trackpadchanged</td>\n<td>Trackpad changed.</td>\n</tr>\n<tr>\n<td>trackpaddown</td>\n<td>Trackpad pressed.</td>\n</tr>\n<tr>\n<td>trackpadup</td>\n<td>Trackpad released.</td>\n</tr>\n<tr>\n<td>trackpadtouchstart</td>\n<td>Trackpad touched.</td>\n</tr>\n<tr>\n<td>trackpadtouchend</td>\n<td>Trackpad not touched.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><a href=\"https://cdn.aframe.io/controllers/google/vr_controller_daydream.obj\">Controller OBJ</a></li>\n<li><a href=\"https://cdn.aframe.io/controllers/google/vr_controller_daydream.mtl\">Controller MTL</a></li>\n</ul>\n",
      "title": "daydream-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/daydream-controls.js",
      "examples": [],
      "excerpt": "<p>The daydream-controls component interfaces with the Google Daydream controllers.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Daydream controller model that highlights the touched\nand/or pressed buttons (trackpad).</p>"
    },
    {
      "id": "background",
      "contents": "<p>The background component sets a basic color background of a scene that is more\nperformant than <code>a-sky</code> since geometry is not created. There are no undesired\nfrustum culling issues when <code>a-sky</code> is further than the far plane of the\ncamera. There are no unexpected occlusions either with far objects that might\nbe behind of the sphere geometry of <code>a-sky</code>.</p>\n<h2 id=\"example\">Example</h2>\n<p>The example below sets the background color to red.</p>\n<pre><code class=\"language-html\">&lt;a-scene background=&quot;color: red&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>Color of the scene background.</td>\n<td>black</td>\n</tr>\n<tr>\n<td>transparent</td>\n<td>Background is transparent. The color property is ignored.</td>\n<td>false</td>\n</tr>\n</tbody></table>\n",
      "title": "background",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/background.js",
      "examples": [],
      "excerpt": "<p>The background component sets a basic color background of a scene that is more\nperformant than <code>a-sky</code> since geometry is not created. There are no undesired\nfrustum culling issues when <code>a-sky</code> is further than the far plane of the\ncamera. There are no unexpected occlusions either with far objects that might\nbe behind of the sphere geometry of <code>a-sky</code>.</p>"
    },
    {
      "id": "cursor",
      "contents": "<p>The cursor component provides hover and click states for interaction on top of\nthe <a href=\"./raycaster.md\">raycaster component</a>. The cursor component can be used for\nboth gaze-based and controller-based interactions, but the appearance needs\nto be configured depending on the use case. The <a href=\"../primitives/a-cursor.md\"><code>&lt;a-cursor&gt;</code>\nprimitive</a> provides a default reticle appearance for a gaze-based\ncursor, and the <a href=\"./laser-controls.md\">laser-controls component</a> configures the\ncursor for all controllers.</p>\n<p>The cursor component listens to events and keeps state on what&#39;s being hovered\nand pressed in order to provide <code>mousedown</code>, <code>mouseup</code>, <code>mouseenter</code>,\n<code>mouseleave</code>, and <code>click</code> events. We use the name <code>mouse</code> to mimic\ntraditional web development for now. Under the hood, the cursor component uses\nthe <code>raycaster-intersection</code> and <code>raycaster-intersection-cleared</code> events,\ncapturing the closest visible intersected entity.</p>\n<p>By default, the cursor is configured to be used in a gaze-based mode and will\nregister user input via mouse or touch. Specifying the <code>downEvents</code> and\n<code>upEvents</code> properties allows the cursor to work with controllers. For example,\nthe <a href=\"./laser-controls.md\">laser-controls component</a> automatically configures these\nproperties to work with most controllers.</p>\n<p>To provide a shape or appearance to the cursor, we should apply either the\n<a href=\"./geometry.md\">geometry</a> and <a href=\"./material.md\">material</a> components or use the raycaster\ncomponent&#39;s <code>showLine</code> property to draw a line using the <a href=\"./line.md\">line\ncomponent</a>.</p>\n<h2 id=\"example\">Example</h2>\n<p>For example, we can create a ring-shaped cursor fixed to the center of the\nscreen. To fix the cursor to the screen so the cursor is always present no\nmatter where we look, we place it as a child of the active <a href=\"./camera.md\">camera</a>\nentity. We pull it in front of the camera by placing it on the negative Z axis.\nWhen the cursor clicks on the box, we can listen to the click event.</p>\n<pre><code class=\"language-html\">&lt;a-entity camera look-controls&gt;\n  &lt;a-entity cursor=&quot;fuse: true; fuseTimeout: 500&quot;\n            position=&quot;0 0 -1&quot;\n            geometry=&quot;primitive: ring; radiusInner: 0.02; radiusOuter: 0.03&quot;\n            material=&quot;color: black; shader: flat&quot;&gt;\n  &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n\n&lt;a-entity id=&quot;box&quot; cursor-listener geometry=&quot;primitive: box&quot; material=&quot;color: blue&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<pre><code class=\"language-js\">// Component to change to a sequential color on click.\nAFRAME.registerComponent(&#39;cursor-listener&#39;, {\n  init: function () {\n    var lastIndex = -1;\n    var COLORS = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;];\n    this.el.addEventListener(&#39;click&#39;, function (evt) {\n      lastIndex = (lastIndex + 1) % COLORS.length;\n      this.setAttribute(&#39;material&#39;, &#39;color&#39;, COLORS[lastIndex]);\n      console.log(&#39;I was clicked at: &#39;, evt.detail.intersection.point);\n    });\n  }\n});</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>downEvents</td>\n<td>Array of additional events on the entity to <em>listen</em> to for triggering <code>mousedown</code> (e.g., <code>triggerdown</code> for vive-controls).</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>fuse</td>\n<td>Whether cursor is fuse-based.</td>\n<td>false on desktop, true on mobile</td>\n</tr>\n<tr>\n<td>fuseTimeout</td>\n<td>How long to wait (in milliseconds) before triggering a fuse-based click event.</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>mouseCursorStylesEnabled</td>\n<td>Whether to show pointer cursor in <code>rayOrigin: mouse</code> mode when hovering over entity.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>rayOrigin</td>\n<td>Where the intersection ray is cast from (i.e.,entity or mouse). <code>rayOrigin: mouse</code> is extremely useful for VR development on a mouse and keyboard.</td>\n<td>entity</td>\n</tr>\n<tr>\n<td>upEvents</td>\n<td>Array of additional events on the entity to <em>listen</em> to for triggering <code>mouseup</code> (e.g., <code>trackpadup</code> for daydream-controls).</td>\n<td>[]</td>\n</tr>\n</tbody></table>\n<p>To further customize the cursor component, we configure the cursor&#39;s dependency\ncomponent, <a href=\"./raycaster.md\">the raycaster component</a>.</p>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>click</td>\n<td>Emitted on both cursor and intersected entity if a currently intersected entity is clicked (whether by mouse or by fuse).</td>\n</tr>\n<tr>\n<td>fusing</td>\n<td>Emitted on both cursor and intersected entity when fuse-based cursor starts counting down.</td>\n</tr>\n<tr>\n<td>mousedown</td>\n<td>Emitted on both cursor and intersected entity (if any) on mousedown on the canvas element.</td>\n</tr>\n<tr>\n<td>mouseenter</td>\n<td>Emitted on both cursor and intersected entity (if any) when cursor intersects with an entity.</td>\n</tr>\n<tr>\n<td>mouseleave</td>\n<td>Emitted on both cursor and intersected entity (if any) when cursor no longer intersects with previously intersected entity.</td>\n</tr>\n<tr>\n<td>mouseup</td>\n<td>Emitted on both cursor and intersected entity (if any) on mouseup on the canvas element.</td>\n</tr>\n</tbody></table>\n<h3 id=\"intersection-data\">Intersection Data</h3>\n<p>Relevant events will contain in the event detail <code>intersection</code>, which will\ncontain <code>{distance, point, face, faceIndex, indices, object}</code> about specific\ndata about the intersection:</p>\n<pre><code class=\"language-js\">this.el.addEventListener(&#39;click&#39;, function (evt) {\n  console.log(evt.detail.intersection.point);\n});</code></pre>\n<h2 id=\"states\">States</h2>\n<p>The cursor will add states to the cursor entity on certain events:</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cursor-fusing</td>\n<td>Added when the cursor is fusing on another entity.</td>\n</tr>\n<tr>\n<td>cursor-hovering</td>\n<td>Added when the cursor is hovering over another entity.</td>\n</tr>\n</tbody></table>\n<p>The cursor will add states to intersected entities on certain events:</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cursor-hovered</td>\n<td>Added to the intersected entity when the cursor is hovering over it.</td>\n</tr>\n</tbody></table>\n<h2 id=\"configuring-the-cursor-through-the-raycaster-component\">Configuring the Cursor through the Raycaster Component</h2>\n<p>The cursor builds on top of and depends on the raycaster component. If we\nwant to customize the raycasting pieces of the cursor, we can do by changing\nthe <a href=\"./raycaster.md#properties\">raycaster component properties</a>. Say we want set a max\ndistance, check for intersections less frequently, and set which objects are\nclickable:</p>\n<pre><code class=\"language-html\">&lt;a-entity cursor raycaster=&quot;far: 20; interval: 1000; objects: .clickable&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"fuse-based-cursor\">Fuse-Based Cursor</h2>\n<p>Also known as gaze-based cursor. If we set the cursor to be fuse-based, the\ncursor will trigger a click if the user gazes at an entity for a set amount of\ntime. Imagine a laser strapped to the user&#39;s head, and the laser extends out\ninto the scene. If the user stares at an entity long enough (i.e., the\n<code>fuseTimeout</code>), then the cursor will trigger a click.</p>\n<p>The advantage of fuse-based interactions for VR is that it does not require\nextra input devices other than the headset. The fuse-based cursor is primarily\nintended for Google Cardboard applications. The disadvantage of fuse-based\ninteractions is that it requires the user to turn their head a lot.</p>\n<h2 id=\"adding-visual-feedback\">Adding Visual Feedback</h2>\n<p>To add visual feedback to the cursor to show when the cursor is clicking or\nfusing, we can use the <a href=\"./animation.md\">animation component</a>.  When the cursor\nintersects the entity, it will emit an event, and the animation system will\npick up event with the <code>begin</code> attribute:</p>\n<pre><code class=\"language-html\">&lt;a-entity\n  animation__click=&quot;property: scale; startEvents: click; easing: easeInCubic; dur: 150; from: 0.1 0.1 0.1; to: 1 1 1&quot;\n  animation__fusing=&quot;property: scale; startEvents: fusing; easing: easeInCubic; dur: 1500; from: 1 1 1; to: 0.1 0.1 0.1&quot;\n  animation__mouseleave=&quot;property: scale; startEvents: mouseleave; easing: easeInCubic; dur: 500; to: 1 1 1&quot;\n  cursor=&quot;fuse: true;&quot;\n  material=&quot;color: black; shader: flat&quot;\n  position=&quot;0 0 -3&quot;\n  geometry=&quot;primitive: ring&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>To play with an example of a cursor with visual feedback, check out the <a href=\"https://codepen.io/Absulit/pen/WEKjqm\">Cursor\nwith Visual Feedback example on CodePen</a>.</p>\n",
      "title": "cursor",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/cursor.js",
      "examples": [
        {
          "title": "Mouse Click Example",
          "src": "https://glitch.com/edit/#!/a-frame-mouse-click-example"
        }
      ],
      "excerpt": "<p>The cursor component provides hover and click states for interaction on top of\nthe <a href=\"./raycaster.md\">raycaster component</a>. The cursor component can be used for\nboth gaze-based and controller-based interactions, but the appearance needs\nto be configured depending on the use case. The <a href=\"../primitives/a-cursor.md\"><code>&lt;a-cursor&gt;</code>\nprimitive</a> provides a default reticle appearance for a gaze-based\ncursor, and the <a href=\"./laser-controls.md\">laser-controls component</a> configures the\ncursor for all controllers.</p>"
    },
    {
      "id": "device-orientation-permission-ui",
      "contents": "<p>Starting with Safari on iOS 13 browsers require sites to be served over <code>https</code> and request user permission to access DeviceOrientation events. This component presents a permission dialog for the user to grant or deny access.\nThe device-orientation-permission-ui component applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a></p>\n<p>To configure the style of the dialog one can redefine the associated css styles. To change the colors of the allow, deny and ok buttons:</p>\n<pre><code class=\"language-css\">.a-dialog-allow-button {\n  background-color: red;\n}\n\n.a-dialog-deny-button {\n  background-color: blue;\n}\n\n.a-dialog-ok-button {\n   background-color: green;\n }</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene device-orientation-permission-ui=&quot;enabled: false&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enabled</td>\n<td>Whether or not to display the dialog when required</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>deviceorientationpermissiongranted</td>\n<td>User has granted access to DeviceOrientation events</td>\n</tr>\n<tr>\n<td>deviceorientationpermissionrejected</td>\n<td>User or browser has denied access to DeviceOrientation events</td>\n</tr>\n<tr>\n<td>deviceorientationpermissionrequested</td>\n<td>Application has requested permission to access DeviceOrientation events</td>\n</tr>\n</tbody></table>\n",
      "title": "device-orientation-permission-ui",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/device-orientation-permission-ui.js",
      "excerpt": "<p>Starting with Safari on iOS 13 browsers require sites to be served over <code>https</code> and request user permission to access DeviceOrientation events. This component presents a permission dialog for the user to grant or deny access.\nThe device-orientation-permission-ui component applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a></p>"
    },
    {
      "id": "debug",
      "contents": "<p>The debug component enables component-to-DOM serialization.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene debug&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"component-to-dom-serialization\">Component-to-DOM Serialization</h2>\n<p>By default, for performance reasons, A-Frame does not update the DOM with\ncomponent data. This also means mutation observers will not fire. If we open\nthe browser&#39;s DOM inspector, we will see only the component names (and not the\nvalues) are visible.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry material position rotation&gt;&lt;/a-entity&gt;</code></pre>\n<p>A-Frame stores the component data in memory. Updating the DOM takes CPU time\nfor converting internal component data to strings. If we want to see the DOM\nupdate for debugging purposes, we can attach the <code>debug</code> component to the\nscene. Components will check for an enabled <code>debug</code> component before trying to\nserialize to the DOM. Then we will be able to view component data in the DOM:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;color: red&quot; position=&quot;1 2 3&quot; rotation=&quot;0 180 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>Make sure that this component is not active in production.</p>\n<h3 id=\"manually-serializing-to-dom\">Manually Serializing to DOM</h3>\n<p>To manually serialize to DOM, use <a href=\"../core/entity.md#flushtodom-recursive\"><code>Entity.flushToDOM</code></a> or\n<a href=\"../core/component.md#flushtodom\"><code>Component.flushToDOM</code></a>:</p>\n<pre><code class=\"language-js\">document.querySelector(&#39;a-entity&#39;).components.position.flushToDOM();  // Flush a component.\ndocument.querySelector(&#39;a-entity&#39;).flushToDOM();  // Flush an entity.\ndocument.querySelector(&#39;a-entity&#39;).flushToDOM(true);  // Flush an entity and its children.\ndocument.querySelector(&#39;a-scene&#39;).flushToDOM(true);  // Flush every entity.</code></pre>\n",
      "title": "debug",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/debug.js",
      "excerpt": "<p>The debug component enables component-to-DOM serialization.</p>"
    },
    {
      "id": "embedded",
      "contents": "<p>The embedded component removes fullscreen CSS styles from A-Frame&#39;s\n<code>&lt;canvas&gt;</code> element, making it easier to embed within the layout of an\nexisting webpage.  Embedding removes the default fixed positioning from\nthe canvas and makes the Enter VR button smaller.</p>\n<h2 id=\"example\">Example</h2>\n<p>Add the <code>embedded</code> component, then style the <code>&lt;a-scene&gt;</code> element with CSS as if\nit were an empty <code>&lt;div&gt;</code>. Within <code>&lt;a-scene&gt;</code> is the <code>&lt;canvas&gt;</code> element.</p>\n<pre><code class=\"language-html\">a-scene {\n  height: 300px;\n  width: 600px;\n}\n\n&lt;body&gt;\n  &lt;div id=&quot;myEmbeddedScene&quot;&gt;\n    &lt;a-scene embedded&gt;\n      &lt;!-- ... --&gt;\n    &lt;/a-scene&gt;\n  &lt;/div&gt;\n&lt;/body&gt;</code></pre>\n<p>An inline example of an embedded scene:</p>\n<script src=\"https://aframe.io/releases/1.0.4/aframe.min.js\"></script>\n\n<style>\n  #myEmbeddedScene {\n    width:100%;\n    height:200px;\n  }\n</style>\n\n<div id=\"myEmbeddedScene\">\n  <a-scene background=\"color: #ECECEC\" embedded>\n    <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\" shadow></a-box>\n    <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\" shadow></a-sphere>\n    <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\" shadow></a-cylinder>\n    <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\" shadow></a-plane>\n  </a-scene>\n</div>\n\n<h2 id=\"integration-with-the-2d-page\">Integration with the 2D Page</h2>\n<p>Embedded scenes can be visually integrated and can interact with the rest of\nthe 2D page. Some things we could do:</p>\n<ul>\n<li>Use CSS <code>z-index</code> to put an HTML element above or under the scene</li>\n<li>Use a transparent <code>&lt;a-sky&gt;</code> or no background to overlay <code>&lt;a-scene&gt;</code> on top of the page, with underlying HTML elements visible</li>\n<li>Use interaction with HTML elements (e.g., buttons, forms) to affect the scene</li>\n</ul>\n<h2 id=\"using-i-frames\">Using I-Frames</h2>\n<p>Only one <code>&lt;a-scene&gt;</code> can exist on a page. Alternatively, we can use an\n<code>&lt;iframe&gt;</code> with <code>allowfullscreen=&quot;yes&quot;</code> and <code>allowvr=&quot;yes&quot;</code> to display multiple\nscenes. For now, if the I-Frame is not on the same origin as the page, the\nWebVR polyfill for mobile won&#39;t work and there won&#39;t be any tracked rotation of\nthe device.</p>\n",
      "title": "embedded",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/embedded.js",
      "examples": [],
      "excerpt": "<p>The embedded component removes fullscreen CSS styles from A-Frame&apos;s\n<code>&lt;canvas&gt;</code> element, making it easier to embed within the layout of an\nexisting webpage.  Embedding removes the default fixed positioning from\nthe canvas and makes the Enter VR button smaller.</p>"
    },
    {
      "id": "fog",
      "contents": "<p>The fog component obscures entities in fog given distance from the camera. The\nfog component applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene fog=&quot;type: linear; color: #AAA&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<p>Given the fog distribution type, different properties will apply.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>Type of fog distribution. Can be <code>linear</code> or <code>exponential</code>.</td>\n<td>linear</td>\n</tr>\n<tr>\n<td>color</td>\n<td>Color of fog. For example, if set to black, far away objects will be rendered black.</td>\n<td>#000</td>\n</tr>\n</tbody></table>\n<h3 id=\"linear-fog\">Linear Fog</h3>\n<p>Linear fog grows linearly denser with distance.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>near</td>\n<td>Minimum distance to start applying fog. Objects closer than this won&#39;t be affected by fog.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>far</td>\n<td>Maximum distance to stop applying fog. Objects farther than this won&#39;t be affected by fog.</td>\n<td>1000</td>\n</tr>\n</tbody></table>\n<h3 id=\"exponential-fog\">Exponential Fog</h3>\n<p>Exponential fog grows exponentially denser with distance.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>density</td>\n<td>How quickly the fog grows dense.</td>\n<td>0.00025</td>\n</tr>\n</tbody></table>\n<h2 id=\"excluding-a-material-from-fog\">Excluding a Material from Fog</h2>\n<p>To not apply fog to certain entities, we can disable fog for certain materials.</p>\n<pre><code class=\"language-html\">&lt;a-entity material=&quot;fog: false&quot;&gt;&lt;/a-entity&gt;</code></pre>\n",
      "title": "fog",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/fog.js",
      "examples": [],
      "excerpt": "<p>The fog component obscures entities in fog given distance from the camera. The\nfog component applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>.</p>"
    },
    {
      "id": "gearvr-controls",
      "contents": "<p>The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Gear VR controller model that highlights the touched\nand/or pressed buttons (trackpad, trigger).</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;!-- Match Gear VR controller if present, regardless of hand. --&gt;\n&lt;a-entity gearvr-controls&gt;&lt;/a-entity&gt;\n\n&lt;!-- Match Gear VR controller if present and for specified hand. --&gt;\n&lt;a-entity gearvr-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity gearvr-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>armModel</td>\n<td>Whether the arm model is used for positional data.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>buttonColor</td>\n<td>Button colors when not pressed.</td>\n<td>#000000</td>\n</tr>\n<tr>\n<td>buttonTouchedColor</td>\n<td>Button colors when touched.</td>\n<td>#777777</td>\n</tr>\n<tr>\n<td>buttonHighlightColor</td>\n<td>Button colors when pressed and active.</td>\n<td>#FFFFFF</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>The hand that will be tracked (e.g., right, left).</td>\n<td></td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the Gear controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trackpadchanged</td>\n<td>Trackpad changed.</td>\n</tr>\n<tr>\n<td>trackpaddown</td>\n<td>Trackpad pressed.</td>\n</tr>\n<tr>\n<td>trackpadup</td>\n<td>Trackpad released.</td>\n</tr>\n<tr>\n<td>trackpadtouchstart</td>\n<td>Trackpad touched.</td>\n</tr>\n<tr>\n<td>trackpadtouchend</td>\n<td>Trackpad not touched.</td>\n</tr>\n<tr>\n<td>triggerchanged</td>\n<td>Trigger changed.</td>\n</tr>\n<tr>\n<td>triggerdown</td>\n<td>Trigger pressed.</td>\n</tr>\n<tr>\n<td>triggerup</td>\n<td>Trigger released.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><a href=\"https://cdn.aframe.io/controllers/samsung/gear_vr_controller.obj\">Controller OBJ</a></li>\n<li><a href=\"https://cdn.aframe.io/controllers/samsung/gear_vr_controller.mtl\">Controller MTL</a></li>\n</ul>\n",
      "title": "gearvr-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/gearvr-controls.js",
      "examples": [],
      "excerpt": "<p>The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Gear VR controller model that highlights the touched\nand/or pressed buttons (trackpad, trigger).</p>"
    },
    {
      "id": "geometry",
      "contents": "<p>The geometry component provides a basic shape for an entity. The <code>primitive</code>\nproperty defines the general shape. Geometric primitives, in computer graphics,\nare irreducible basic shapes. A material component is commonly defined to\nprovide a appearance alongside the shape to create a complete mesh.</p>\n<!--toc-->\n\n<h2 id=\"base-properties\">Base Properties</h2>\n<p>Every geometry type will have these properties:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>buffer</td>\n<td>Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>primitive</td>\n<td>Name of a geometry (e.g., one of the geometries listed below). Determines the geometry type and what other properties are available.</td>\n<td>box</td>\n</tr>\n<tr>\n<td>skipCache</td>\n<td>Disable retrieving the shared geometry object from the cache.</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h2 id=\"built-in-geometries\">Built-in Geometries</h2>\n<h3 id=\"box\"><code>box</code></h3>\n<p>The box geometry defines boxes (i.e., any quadilateral, not just cubes).</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: box; width: 1; height: 1; depth: 1&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>Width (in meters) of the sides on the X axis.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Height (in meters) of the sides on the Y axis.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>depth</td>\n<td>Depth (in meters) of the sides on the Z axis.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsDepth</td>\n<td>Number of segmented faces on the z-axis</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsHeight</td>\n<td>Number of segmented faces on the y-axis</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsWidth</td>\n<td>Number of segmented faces on the x-axis</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h3 id=\"circle\"><code>circle</code></h3>\n<p>The circle geometry creates flat two-dimensional circles. These can be complete\ncircles or partial circles (like Pac-Man). Note that because circles are flat,\nA-Frame will only render a single face of the circle if we don&#39;t specify <code>side:\ndouble</code> on the <code>material</code> component.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: circle; radius: 1&quot; material=&quot;side: double&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius (in meters) of the circle.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segments</td>\n<td>Number of triangles to construct the circle, like pizza slices. A higher number of segments means the circle will be more round.</td>\n<td>32</td>\n</tr>\n<tr>\n<td>thetaStart</td>\n<td>Start angle for first segment. Can be used to define a partial circle.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>thetaLength</td>\n<td>The central angle (in degrees). Defaults to <code>360</code>, which makes for a complete circle.</td>\n<td>360</td>\n</tr>\n</tbody></table>\n<h4 id=\"thetalength-and-thetastart-properties\"><code>thetaLength</code> and <code>thetaStart</code> Properties</h4>\n<p>In degrees, <code>thetaStart</code> defines where to start a circle or arc and\n<code>thetaLength</code> defines where a circle or arc ends. If we wanted to make a <code>(</code>\nshape, we would start the circle halfway through and define the length as half\nof a circle. We can do this with <code>thetaStart: 180; thetaLength: 180</code>. Or if we\nwanted to make a <code>)</code> shape, we can do <code>thetaStart: 0; thetaLength: 180</code>.</p>\n<p>Useful cases might be to animating <code>thetaStart</code> to create a spinner effect or\nanimating <code>thetaLength</code> on a fuse-based cursor for visual feedback.</p>\n<h3 id=\"cone\"><code>cone</code></h3>\n<p>The cone geometry is a cylinder geometry that have different top and bottom radii.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: cone; radiusBottom: 1; radiusTop: 0.1&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>Height of the cone.</td>\n<td>2</td>\n</tr>\n<tr>\n<td>openEnded</td>\n<td>Whether the ends of the cone are open (true) or capped (false).</td>\n<td>false</td>\n</tr>\n<tr>\n<td>radiusBottom</td>\n<td>Radius of the bottom end of the cone.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>radiusTop</td>\n<td>Radius of the top end of the cone.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsRadial</td>\n<td>Number of segmented faces around the circumference of the cone.</td>\n<td>36</td>\n</tr>\n<tr>\n<td>segmentsHeight</td>\n<td>Number of rows of faces along the height of the cone.</td>\n<td>18</td>\n</tr>\n<tr>\n<td>thetaStart</td>\n<td>Starting angle in degrees.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>thetaLength</td>\n<td>Central angle in degrees.</td>\n<td>360</td>\n</tr>\n</tbody></table>\n<h3 id=\"cylinder\"><code>cylinder</code></h3>\n<p>The cylinder geometry creates cylinders in the traditional sense like a\nCoca-Cola™ can, but it can also define shapes such as tubes and curved\nsurfaces.</p>\n<p>We can create a basic cylinder using height and radius:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: cylinder; height: 3; radius: 2&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>We can create a tube by making the cylinder open-ended, which removes the top\nand bottom surfaces of the cylinder such that the inside is visible. Then we\nneed a double-sided material to render properly:</p>\n<pre><code class=\"language-html\">&lt;!-- Tube --&gt;\n&lt;a-entity geometry=&quot;primitive: cylinder; openEnded: true&quot; material=&quot;side: double&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>We can create a curved surfaces by specifying the arc via <code>thetaLength</code> such\nthat the cylinder doesn&#39;t curve all the way around, making the cylinder\nopen-ended, and then making the material double-sided:</p>\n<pre><code class=\"language-html\">&lt;!-- Curved surface --&gt;\n&lt;a-entity geometry=&quot;primitive: cylinder; openEnded: true; thetaLength: 180&quot;\n          material=&quot;side: double&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius of the cylinder.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Height of the cylinder.</td>\n<td>2</td>\n</tr>\n<tr>\n<td>segmentsRadial</td>\n<td>Number of segmented faces around the circumference of the cylinder.</td>\n<td>36</td>\n</tr>\n<tr>\n<td>segmentsHeight</td>\n<td>Number of rows of faces along the height of the cylinder.</td>\n<td>18</td>\n</tr>\n<tr>\n<td>openEnded</td>\n<td>Whether the ends of the cylinder are open (true) or capped (false).</td>\n<td>false</td>\n</tr>\n<tr>\n<td>thetaStart</td>\n<td>Starting angle in degrees.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>thetaLength</td>\n<td>Central angle in degrees.</td>\n<td>360</td>\n</tr>\n</tbody></table>\n<p>We can create <a href=\"https://en.wikipedia.org/wiki/Prism_%28geometry%29\">prisms</a> by changing the number of radial segments\n(i.e., sides). For example, to make a hexagonal prism:</p>\n<pre><code class=\"language-html\">&lt;!-- Hexagonal prism --&gt;\n&lt;a-entity geometry=&quot;primitive: cylinder; segmentsRadial: 6&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h3 id=\"dodecahedron\"><code>dodecahedron</code></h3>\n<p>The dodecahedron geometry creates a polygon with twelve equally-sized faces.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: dodecahedron; radius: 2&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius (in meters) of the dodecahedron.</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h3 id=\"octahedron\"><code>octahedron</code></h3>\n<p>The octahedron geometry creates a polygon with eight equilateral triangular faces.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: octahedron&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius (in meters) of the tetrahedron.</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h3 id=\"plane\"><code>plane</code></h3>\n<p>The plane geometry creates a flat surface. Because planes are flat, A-Frame\nwill render only a single face of the plane unless we specify <code>side: double</code> on\nthe <code>material</code> component.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: plane; height: 10; width: 10&quot; material=&quot;side: double&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>Width along the X axis.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Height along the Y axis.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsHeight</td>\n<td>Number of segmented faces on the y-axis</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsWidth</td>\n<td>Number of segmented faces on the x-axis</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h3 id=\"ring\"><code>ring</code></h3>\n<p>The ring geometry creates a flat ring, like a <a href=\"https://en.wikipedia.org/wiki/Compact_disc\">CD</a>. Because the ring is\nflat, A-Frame will only render a single face of the ring unless we specify <code>side:\ndouble</code> the <code>material</code> component.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: ring; radiusInner: 0.5; radiusOuter: 1&quot;\n          material=&quot;side: double&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radiusInner</td>\n<td>Radius of the inner hole of the ring.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>radiusOuter</td>\n<td>Radius of the outer edge of the ring.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsTheta</td>\n<td>Number of segments. A higher number means the ring will be more round.</td>\n<td>32</td>\n</tr>\n<tr>\n<td>segmentsPhi</td>\n<td>Number of triangles within each face defined by segmentsTheta.</td>\n<td>8</td>\n</tr>\n<tr>\n<td>thetaStart</td>\n<td>Starting angle in degrees.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>thetaLength</td>\n<td>Central angle in degrees.</td>\n<td>360</td>\n</tr>\n</tbody></table>\n<h3 id=\"sphere\"><code>sphere</code></h3>\n<p>The sphere geometry creates spheres (e.g., balls). We can create a basic sphere:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: sphere; radius: 2&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>We can create polyhedrons and abstract shapes by specifying the number of\nhorizontal angles and faces:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: sphere; segmentsWidth: 2; segmentsHeight: 8&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius of the sphere.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>segmentsWidth</td>\n<td>Number of horizontal segments.</td>\n<td>18</td>\n</tr>\n<tr>\n<td>segmentsHeight</td>\n<td>Number of vertical segments.</td>\n<td>36</td>\n</tr>\n<tr>\n<td>phiStart</td>\n<td>Horizontal starting angle.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>phiLength</td>\n<td>Horizontal sweep angle size.</td>\n<td>360</td>\n</tr>\n<tr>\n<td>thetaStart</td>\n<td>Vertical starting angle.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>thetaLength</td>\n<td>Vertical sweep angle size.</td>\n<td>360</td>\n</tr>\n</tbody></table>\n<h3 id=\"tetrahedron\"><code>tetrahedron</code></h3>\n<p>The tetrahedron geometry creates a polygon with four triangular faces.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: tetrahedron; radius: 2&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius (in meters) of the tetrahedron.</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h3 id=\"torus\"><code>torus</code></h3>\n<p>The torus geometry creates a donut or curved tube shape:</p>\n<pre><code class=\"language-html\">&lt;!-- Half donut --&gt;\n&lt;a-entity geometry=&quot;primitive: torus; radius: 2; radiusTubular: 0.5; arc: 180&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius of the outer edge of the torus.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>radiusTubular</td>\n<td>Radius of the tube.</td>\n<td>0.2</td>\n</tr>\n<tr>\n<td>segmentsRadial</td>\n<td>Number of segments along the circumference of the tube ends. A higher number means the tube will be more round.</td>\n<td>36</td>\n</tr>\n<tr>\n<td>segmentsTubular</td>\n<td>Number of segments along the circumference of the tube face. A higher number means the tube will be more round.</td>\n<td>32</td>\n</tr>\n<tr>\n<td>arc</td>\n<td>Central angle.</td>\n<td>360</td>\n</tr>\n</tbody></table>\n<h3 id=\"torusknot\"><code>torusKnot</code></h3>\n<p>The torus knot geometry creates a pretzel shape. A pair of coprime integers,\n<code>p</code> and <code>q</code>, defines the particular shape of the pretzel. If <code>p</code> and <code>q</code> are\nnot coprime the result will be a torus link:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: torusKnot; p: 3; q:7&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>radius</td>\n<td>Radius that contains the torus knot.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>radiusTubular</td>\n<td>Radius of the tubes of the torus knot.</td>\n<td>0.2</td>\n</tr>\n<tr>\n<td>segmentsRadial</td>\n<td>Number of segments along the circumference of the tube ends. A higher number means the tube will be more round.</td>\n<td>36</td>\n</tr>\n<tr>\n<td>segmentsTubular</td>\n<td>Number of segments along the circumference of the tube face. A higher number means the tube will be more round.</td>\n<td>32</td>\n</tr>\n<tr>\n<td>p</td>\n<td>How many times the geometry winds around its axis of rotational symmetry.</td>\n<td>2</td>\n</tr>\n<tr>\n<td>q</td>\n<td>How many times the geometry winds around a circle in the interior of the torus.</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h3 id=\"triangle\"><code>triangle</code></h3>\n<p>The triangle geometry creates a flat two-dimensional triangle. Because triangles are flat,\nA-Frame will render only a single face, which is the one with <code>vertexA</code>, <code>vertexB</code>, and\n<code>vertexC</code> appear in counterclockwise order on the screen, unless we specify <code>side: double</code> on\nthe <code>material</code> component.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: triangle&quot; material=&quot;side: double&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vertexA</td>\n<td>Coordinates of one of the three vertices</td>\n<td>0  0.5 0</td>\n</tr>\n<tr>\n<td>vertexB</td>\n<td>Coordinates of one of the three vertices</td>\n<td>-0.5 -0.5 0</td>\n</tr>\n<tr>\n<td>vertexC</td>\n<td>Coordinates of one of the three vertices</td>\n<td>0.5 -0.5 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"register-a-custom-geometry\">Register a Custom Geometry</h2>\n<p>We can register our own geometries using <code>AFRAME.registerGeometry</code> and creating\nan object that is an instance of <a href=\"https://threejs.org/docs/#api/core/Geometry\"><code>THREE.Geometry</code></a>. A-Frame\nregisters all built-in geometries using this API. Here is how A-Frame registers\nthe <code>box</code> geometry:</p>\n<pre><code class=\"language-js\">AFRAME.registerGeometry(&#39;box&#39;, {\n  schema: {\n    depth: {default: 1, min: 0},\n    height: {default: 1, min: 0},\n    width: {default: 1, min: 0},\n    segmentsHeight: {default: 1, min: 1, max: 20, type: &#39;int&#39;},\n    segmentsWidth: {default: 1, min: 1, max: 20, type: &#39;int&#39;},\n    segmentsDepth: {default: 1, min: 1, max: 20, type: &#39;int&#39;}\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.BoxGeometry(data.width, data.height, data.depth);\n  }\n});</code></pre>\n<p>Like with registering components, we provide a name, a\n<a href=\"../core/component.md#schema\">schema</a> that will expose the properties of the geometry, and\nlifecycle methods. Then we need to create the geometry and set on\n<code>this.geometry</code> through the <code>init</code> lifecycle method.</p>\n<p>When a geometry component sets its <code>primitive</code> property to the custom geometry\nname, we can set the properties of the custom geometry on the geometry\ncomponent. Say we registered a custom geometry:</p>\n<pre><code class=\"language-js\">AFRAME.registerGeometry(&#39;example&#39;, {\n  schema: {\n    vertices: {\n      default: [&#39;-10 10 0&#39;, &#39;-10 -10 0&#39;, &#39;10 -10 0&#39;],\n    }\n  },\n\n  init: function (data) {\n    var geometry = new THREE.Geometry();\n    geometry.vertices = data.vertices.map(function (vertex) {\n        var points = vertex.split(&#39; &#39;).map(function(x){return parseInt(x);});\n        return new THREE.Vector3(points[0], points[1], points[2]);\n    });\n    geometry.computeBoundingBox();\n    geometry.faces.push(new THREE.Face3(0, 1, 2));\n    geometry.mergeVertices();\n    geometry.computeFaceNormals();\n    geometry.computeVertexNormals();\n    this.geometry = geometry;\n  }\n});</code></pre>\n<p>We can then use that custom geometry in HTML:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: example; vertices: 1 1 -3, 3 1 -3, 2 2 -3&quot;&gt;&lt;/a-entity&gt;</code></pre>\n",
      "title": "geometry",
      "type": "components",
      "layout": "docs",
      "parent_section": "docs",
      "section_title": "Components",
      "section_order": 4,
      "source_code": "src/components/geometry.js",
      "examples": [
        {
          "title": "Creating Shapes",
          "src": "https://glitch.com/edit/#!/ex-2-geometry?path=index.html:1:0"
        },
        {
          "title": "Texture on Shapes",
          "src": "https://glitch.com/edit/#!/ex-2a-texture-on-shape?path=index.html:1:0"
        },
        {
          "title": "Shape as Entity",
          "src": "https://glitch.com/edit/#!/ex-2b-shape-as-entity?path=index.html:1:0"
        },
        {
          "title": "Animating Shapes",
          "src": "https://glitch.com/edit/#!/ex-2c-animating-shapes?path=index.html:1:0"
        },
        {
          "title": "Animating Shapes with Components",
          "src": "https://glitch.com/edit/#!/ex-2d-animating-shapes-with-components?path=index.html:1:0"
        }
      ],
      "excerpt": "<p>The geometry component provides a basic shape for an entity. The <code>primitive</code>\nproperty defines the general shape. Geometric primitives, in computer graphics,\nare irreducible basic shapes. A material component is commonly defined to\nprovide a appearance alongside the shape to create a complete mesh.</p>"
    },
    {
      "id": "gltf-model",
      "contents": "<p><a href=\"https://www.khronos.org/gltf\">glTF</a> (GL Transmission Format) is an open project by Khronos\nproviding a common, extensible format for 3D assets that is both efficient and\nhighly interoperable with modern web technologies.</p>\n<p>The <code>gltf-model</code> component loads a 3D model using a glTF (<code>.gltf</code> or <code>.glb</code>)\nfile.</p>\n<p>Note that glTF is a fairly new specification and adoption is still growing.\nWork on the <a href=\"https://threejs.org/docs/#examples/loaders/GLTFLoader\">three.js glTF loader</a> and converters are still\nactive.</p>\n<blockquote>\n<p><strong>NOTE:</strong> A-Frame supports glTF 2.0. For models using older versions of the\nglTF format, use <code>gltf-model-legacy</code> from <a href=\"https://github.com/donmccurdy/aframe-extras/tree/master/src/loaders\">donmccurdy/aframe-extras</a>.</p>\n</blockquote>\n<!--toc-->\n\n<h2 id=\"why-use-gltf\">Why use glTF?</h2>\n<p>In comparison to the older <a href=\"./obj-model.md\">OBJ</a> format, which supports only\nvertices, normals, texture coordinates, and basic materials, glTF provides a\nmore powerful set of features. In addition to all of the above, glTF offers:</p>\n<ul>\n<li>Hierarchical objects</li>\n<li>Scene information (light sources, cameras)</li>\n<li>Skeletal structure and animation</li>\n<li>More robust materials and shaders</li>\n</ul>\n<p>For simple models with no animation, OBJ is nevertheless a common and reliable\nchoice.</p>\n<p>In comparison to COLLADA or FBX, the supported features are very\nsimilar. However, because glTF focuses on providing a &quot;transmission format&quot;\nrather than an editor format, it is more interoperable with web technologies.\nBy analogy, the .PSD (Adobe Photoshop) format is helpful for editing 2D images,\nbut images are converted to .JPG for use on the web. In the same way, glTF is a\nsimpler way of transmitting 3D assets while rendering the same result.</p>\n<p>In short, expect glTF models to work with A-Frame more reliably than other\nformats.</p>\n<h2 id=\"example\">Example</h2>\n<p>Load a glTF model by pointing to an asset that specifies the <code>src</code> for a glTF\nfile.</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;a-asset-item id=&quot;tree&quot; src=&quot;/path/to/tree.gltf&quot;&gt;&lt;/a-asset-item&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity gltf-model=&quot;#tree&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<h2 id=\"values\">Values</h2>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>selector</td>\n<td>Selector to an <code>&lt;a-asset-item&gt;</code></td>\n</tr>\n<tr>\n<td>string</td>\n<td><code>url()</code>-enclosed path to a glTF file</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>model-loaded</td>\n<td>glTF model has been loaded into the scene.</td>\n</tr>\n<tr>\n<td>model-error</td>\n<td>glTF model could not be loaded.</td>\n</tr>\n</tbody></table>\n<h2 id=\"loading-inline\">Loading Inline</h2>\n<p>Alternatively, load a glTF model by specifying the path directly within\n<code>url()</code>. However, the scene won&#39;t wait for the resource to load before\nrendering.</p>\n<pre><code class=\"language-html\">&lt;a-entity gltf-model=&quot;url(/path/to/tree.gltf)&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"using-animations\">Using animations</h2>\n<p>If you want to use the animations from your glTF model, you can use the <a href=\"https://github.com/donmccurdy/aframe-extras/tree/master/src/loaders#animation\">animation-mixer</a> component from <a href=\"https://github.com/donmccurdy/aframe-extras\">aframe-extras</a>. By default all animations are played in a loop.</p>\n<pre><code class=\"language-html\">&lt;a-entity gltf-model=&quot;#monster&quot; animation-mixer&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"geometry-compression-with-draco\">Geometry compression with Draco</h2>\n<p>Geometry in a glTF model may be compressed using the <a href=\"https://google.github.io/draco/\">Draco library</a>.\nFor models containing primarily geometry, with simple untextured materials or\nvertex colors, compression can often reduce file size by 90–95%. When the model\ncontains other large data — like textures or animation, which Draco does not\naffect — file size savings will be less significant.</p>\n<p>The tradeoff with any form of compression will be decoding time. Compressed\nmodels take less time to download and use less bandwidth, but cannot be rendered\nuntil they&#39;re decompressed. To avoid dropping frames in VR, delay the beginning\nof the experience until models are downloaded and decompressed.</p>\n<p>To apply Draco compression to an existing glTF model, use\n<a href=\"https://github.com/AnalyticalGraphicsInc/gltf-pipeline\">glTF-Pipeline</a>. You&#39;ll also need to host the Draco decoder\nlibrary with your scene and configure scene properties as explained below.</p>\n<h2 id=\"scene-properties\">Scene properties</h2>\n<p>When using glTF models compressed with Draco, you must host the Draco decoder\nlibrary with your scene and configure the path to the decoder:</p>\n<pre><code class=\"language-html\">&lt;a-scene gltf-model=&quot;dracoDecoderPath: path/to/decoder/;&quot;&gt;\n  &lt;a-entity gltf-model=&quot;url(pony.glb)&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dracoDecoderPath</td>\n<td>Path to the Draco decoder libraries.</td>\n<td>&#39;&#39;</td>\n</tr>\n</tbody></table>\n<p>The decoder folder must contain three files:</p>\n<ul>\n<li><code>draco_decoder.js</code> — Emscripten-compiled decoder, compatible with any modern browser.</li>\n<li><code>draco_decoder.wasm</code> — WebAssembly decoder, compatible with newer browsers and devices.</li>\n<li><code>draco_wasm_wrapper.js</code> — JavaScript wrapper for the WASM decoder.</li>\n</ul>\n<p>All files are available from the three.js repository, under\n<a href=\"https://github.com/mrdoob/three.js/tree/master/examples/js/libs/draco/gltf\">examples/js/libs/draco/gltf</a>. The <code>gltf-model</code> component will\nautomatically choose whether to use a WASM or JavaScript decoder, so both should\nbe included.</p>\n<h2 id=\"more-resources\">More Resources</h2>\n<p>Over 100,000 glTF models are free for download on <a href=\"https://sketchfab.com/models?features=downloadable&amp;sort_by=-likeCount\">Sketchfab</a>, and\nvarious exporters and converters converters are available:</p>\n<ul>\n<li><a href=\"https://www.blender.org/\">Blender 2.80+</a></li>\n<li><a href=\"https://github.com/AnalyticalGraphicsInc/obj2gltf\">OBJ &rarr; glTF</a></li>\n<li><a href=\"https://github.com/facebookincubator/FBX2glTF\">FBX &rarr; glTF</a></li>\n<li><a href=\"http://cesiumjs.org/convertmodel.html\">COLLADA &rarr; glTF</a></li>\n<li><a href=\"https://blog.mozvr.com/a-saturday-night-gltf-workflow/\">glTF Workflow for A Saturday Night</a></li>\n</ul>\n<p>See the <a href=\"https://github.com/KhronosGroup/glTF\">official glTF specification</a> for available features, community\nresources, and ways to contribute.</p>\n",
      "title": "gltf-model",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/gltf-model.js",
      "examples": [
        {
          "title": "Modifying Material of Model",
          "src": "https://glitch.com/edit/#!/aframe-modify-model-material?path=index.html:1:0"
        }
      ],
      "excerpt": "<p><a href=\"https://www.khronos.org/gltf\">glTF</a> (GL Transmission Format) is an open project by Khronos\nproviding a common, extensible format for 3D assets that is both efficient and\nhighly interoperable with modern web technologies.</p>"
    },
    {
      "id": "hand-controls",
      "contents": "<p>The hand-controls component provides tracked hands (using a prescribed model)\nwith animated gestures. hand-controls wraps the <a href=\"./vive-controls.md\">vive-controls</a> and\n<a href=\"./oculus-touch-controls.md\">oculus-touch-controls</a> which in turn wrap the <a href=\"./tracked-controls.md\">tracked-controls\ncomponent</a>. By specifying just <code>hand-controls</code>, we have something that\nworks well with both Vive and Rift. The component gives extra events and\nhandles hand animations and poses.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;leftHand&quot; hand-controls=&quot;hand: left; handModelStyle: lowPoly; color: #ffcccc&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity id=&quot;rightHand&quot; hand-controls=&quot;hand: right; handModelStyle: lowPoly; color: #ffcccc&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>Color of hand material.</td>\n<td>white</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>Associated controller. Can be <code>left</code> or <code>right</code>.</td>\n<td>left</td>\n</tr>\n<tr>\n<td>handModelStyle</td>\n<td>Style of the hand 3D model loaded. Can be <code>lowPoly</code>, <code>highPoly</code> or <code>toon</code>.</td>\n<td>lowPoly</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gripdown</td>\n<td>The hand is closed into a fist without thumb raised.</td>\n</tr>\n<tr>\n<td>gripup</td>\n<td>The hand is no longer closed into a fist without thumb raised.</td>\n</tr>\n<tr>\n<td>pointup</td>\n<td>The hand is touching or pressing the trigger only.</td>\n</tr>\n<tr>\n<td>pointdown</td>\n<td>The hand is no longer touching or pressing the trigger only.</td>\n</tr>\n<tr>\n<td>thumbup</td>\n<td>The hand is closed into a fist with thumb raised.</td>\n</tr>\n<tr>\n<td>thumbdown</td>\n<td>The hand is no longer closed into a fist with thumb raised.</td>\n</tr>\n<tr>\n<td>pointingstart</td>\n<td>The hand is pointing with index finger without thumb raised.</td>\n</tr>\n<tr>\n<td>pointingend</td>\n<td>The hand is no longer pointing without thumb raised.</td>\n</tr>\n<tr>\n<td>pistolstart</td>\n<td>The hand is pointing with index finger and thumb raised.</td>\n</tr>\n<tr>\n<td>pistolend</td>\n<td>The hand is no longer pointing with thumb raised.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><p><a href=\"https://cdn.aframe.io/controllers/hands/leftHandLow.glb\">Left hand low poly model</a></p>\n</li>\n<li><p><a href=\"https://cdn.aframe.io/controllers/hands/rightHandLow.glb\">Right hand low poly model</a></p>\n</li>\n<li><p><a href=\"https://cdn.aframe.io/controllers/hands/leftHandHigh.glb\">Left hand high poly model</a></p>\n</li>\n<li><p><a href=\"https://cdn.aframe.io/controllers/hands/rightHandHigh.glb\">Right hand high poly model</a></p>\n</li>\n<li><p><a href=\"https://cdn.aframe.io/controllers/hands/leftHand.glb\">Left hand toon model</a></p>\n</li>\n<li><p><a href=\"https://cdn.aframe.io/controllers/hands/rightHand.glb\">Right hand toon model</a></p>\n</li>\n</ul>\n",
      "title": "hand-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/hand-controls.js",
      "examples": [],
      "excerpt": "<p>The hand-controls component provides tracked hands (using a prescribed model)\nwith animated gestures. hand-controls wraps the <a href=\"./vive-controls.md\">vive-controls</a> and\n<a href=\"./oculus-touch-controls.md\">oculus-touch-controls</a> which in turn wrap the <a href=\"./tracked-controls.md\">tracked-controls\ncomponent</a>. By specifying just <code>hand-controls</code>, we have something that\nworks well with both Vive and Rift. The component gives extra events and\nhandles hand animations and poses.</p>"
    },
    {
      "id": "keyboard-shortcuts",
      "contents": "<p>The keyboard-shortcuts component toggles global keyboard shortcuts. The\nkeyboard-shortcuts component applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene keyboard-shortcuts=&quot;enterVR: false&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enterVR</td>\n<td>Enables the shortcut to press &#39;F&#39; to enter VR.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n",
      "title": "keyboard-shortcuts",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/keyboard-shortcuts.js",
      "excerpt": "<p>The keyboard-shortcuts component toggles global keyboard shortcuts. The\nkeyboard-shortcuts component applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>.</p>"
    },
    {
      "id": "laser-controls",
      "contents": "<p>The laser-controls component provides tracked controls with a laser or ray\ncursor shooting out to be used for input and interactions. <em>DoF</em> stands for\n<a href=\"http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/\">degrees of freedom</a>. Because they only require rotation and some form of\ninput, laser-based interactions scale well across 0 DoF (gaze-based,\nCardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus\nTouch). If desired, we can get a consistent form of interaction that works\nacross all VR platforms with a single line of HTML.</p>\n<p>laser-controls is a <strong>higher-order component</strong>, meaning the component wraps and\nconfigures other components, rather than implementing any logic itself. Under\nthe hood, laser-controls sets all of the tracked controller components:</p>\n<ul>\n<li><a href=\"./vive-controls.md\">vive-controls</a></li>\n<li><a href=\"./oculus-touch-controls.md\">oculus-touch-controls</a></li>\n<li><a href=\"./daydream-controls.md\">daydream-controls</a></li>\n<li><a href=\"./gearvr-controls.md\">gearvr-controls</a></li>\n<li><a href=\"./windows-motion-controls.md\">windows-motion-controls</a></li>\n</ul>\n<p>These controller components get activated if its respective controller is\nconnected and detected via the Gamepad API. Then the model of the actual\ncontroller is used. laser-controls then configures the <a href=\"./cursor.md\">cursor\ncomponent</a> for listen to the appropriate events and configures the\n<a href=\"./raycaster.md\">raycaster component</a> to draw the laser.</p>\n<p>When the laser intersects with an entity, the length of the line gets truncated\nto the distance to the intersection point.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity laser-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hand</td>\n<td><code>left</code> or <code>right</code>.</td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the default model for the controller is loaded.</td>\n</tr>\n<tr>\n<td>defaultModelColor</td>\n<td>Color for the default controller model.</td>\n</tr>\n</tbody></table>\n<h2 id=\"customizing-the-raycaster\">Customizing the Raycaster</h2>\n<p>Configure the <a href=\"./raycaster.md\">raycaster properties</a>.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&lt;a-entity laser-controls raycaster=&quot;objects: .links; far: 5&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"customizing-the-line\">Customizing the Line</h2>\n<p>See <a href=\"./raycaster.md#customizing-the-line\"><em>Raycaster: Customizing the Line</em></a>.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&lt;a-entity laser-controls line=&quot;color: red; opacity: 0.75&quot;&gt;&lt;/a-entity&gt;</code></pre>\n",
      "title": "laser-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "image": {
        "src": "https://user-images.githubusercontent.com/674727/26897482-91947a94-4b7d-11e7-9cb5-5c47f50938e4.gif"
      },
      "source_code": "src/components/laser-controls.js",
      "examples": [],
      "excerpt": "<p>The laser-controls component provides tracked controls with a laser or ray\ncursor shooting out to be used for input and interactions. <em>DoF</em> stands for\n<a href=\"http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/\">degrees of freedom</a>. Because they only require rotation and some form of\ninput, laser-based interactions scale well across 0 DoF (gaze-based,\nCardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus\nTouch). If desired, we can get a consistent form of interaction that works\nacross all VR platforms with a single line of HTML.</p>"
    },
    {
      "id": "light",
      "contents": "<p>The light component defines the entity as a source of light. Light affects all\nmaterials that have not specified a flat shading model with <code>shader: flat</code>.\nNote that lights are computationally expensive we should limit number of lights\nin a scene.</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;color: #AFA; intensity: 1.5&quot; position=&quot;-1 1 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>By default, A-Frame scenes inject default lighting, an ambient light and a\ndirectional light. These default lights are visible in the DOM with the\n<code>data-aframe-default-light</code> attribute. Whenever we add any lights, A-Frame\nremoves the default lights from the scene.</p>\n<pre><code class=\"language-html\">&lt;!-- Default lighting injected by A-Frame. --&gt;\n&lt;a-entity light=&quot;type: ambient; color: #BBB&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity light=&quot;type: directional; color: #FFF; intensity: 0.6&quot; position=&quot;-0.5 1 1&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>To manually disable the defaults, without adding other lights:</p>\n<pre><code class=\"language-html\">&lt;a-scene light=&quot;defaultLightsEnabled: false&quot;&gt;\n  &lt;!-- ... --&gt;\n&lt;/a-scene&gt;</code></pre>\n<!--toc-->\n\n<h2 id=\"properties\">Properties</h2>\n<p>All light types support a few basic properties:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>One of <code>ambient</code>, <code>directional</code>, <code>hemisphere</code>, <code>point</code>, <code>spot</code>.</td>\n<td>directional</td>\n</tr>\n<tr>\n<td>color</td>\n<td>Light color.</td>\n<td>#fff</td>\n</tr>\n<tr>\n<td>intensity</td>\n<td>Light strength.</td>\n<td>1.0</td>\n</tr>\n</tbody></table>\n<h2 id=\"light-types\">Light Types</h2>\n<p>Different types of lights include unique properties. We will go through each\ntype, including its properties and when it may be the right choice.</p>\n<h3 id=\"ambient\">Ambient</h3>\n<p>Ambient lights globally affect all entities in the scene. The <code>color</code> and\n<code>intensity</code> properties define ambient lights. Additionally, <code>position</code>,\n<code>rotation</code>, and <code>scale</code> have no effect on ambient lights.</p>\n<p>We recommend to have some form of ambient light such that shadowed areas are\nnot fully black and to mimic indirect lighting.</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;type: ambient; color: #CCC&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h3 id=\"directional\">Directional</h3>\n<p>Directional lights are like a light source that is infinitely far away, but shining\nfrom a specific direction, like the sun. Thus, absolute position do not have an\neffect on the intensity of the light on an entity. We can specify the direction\nusing the <code>position</code> component.</p>\n<p>The example below creates a light source shining from the upper-left at a\n45-degree angle. Note that because only the vector matters, <code>position=&quot;-100 100\n0&quot;</code> and <code>position=&quot;-1 1 0&quot;</code> are the same.</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;type: directional; color: #EEE; intensity: 0.5&quot; position=&quot;-1 1 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>We can specify the direction of the directional light with its orientation by\ncreating a child entity it targets. For example, pointing down its -Z axis:</p>\n<pre><code class=\"language-html\">&lt;a-light type=&quot;directional&quot; position=&quot;0 0 0&quot; rotation=&quot;-90 0 0&quot; target=&quot;#directionaltarget&quot;&gt;\n  &lt;a-entity id=&quot;directionaltarget&quot; position=&quot;0 0 -1&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-light&gt;</code></pre>\n<p>Directional lights are the most efficient type for adding realtime shadows to a scene.</p>\n<h3 id=\"hemisphere\">Hemisphere</h3>\n<p>Hemisphere lights are like an ambient light, but with two different colors, one\nfrom above (<code>color</code>) and one from below (<code>groundColor</code>). This can be useful for\nscenes with two distinct lighting colors (e.g., a grassy field under a gray\nsky).</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;type: hemisphere; color: #33C; groundColor: #3C3; intensity: 2&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>Light color from above.</td>\n<td>#fff</td>\n</tr>\n<tr>\n<td>groundColor</td>\n<td>Light color from below.</td>\n<td>#fff</td>\n</tr>\n</tbody></table>\n<h3 id=\"point\">Point</h3>\n<p>Point lights, unlike directional lights, are omni-directional and affect\nmaterials depending on their position and distance. Point lights are like light\nbulb. The closer the light bulb gets to an object, the greater the object is\nlit.</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;type: point; intensity: 0.75; distance: 50; decay: 2&quot;\n          position=&quot;0 10 10&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>decay</td>\n<td>Amount the light dims along the distance of the light.</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>distance</td>\n<td>Distance where intensity becomes 0. If <code>distance</code> is <code>0</code>, then the point light does not decay with distance.</td>\n<td>0.0</td>\n</tr>\n</tbody></table>\n<h3 id=\"spot\">Spot</h3>\n<p>Spot lights are like point lights in the sense that they affect materials\ndepending on its position and distance, but spot lights are not\nomni-directional. They mainly cast light in one direction, like the\n<a href=\"https://en.wikipedia.org/wiki/Bat-Signal\">Bat-Signal</a>.</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;type: spot; angle: 45&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>angle</td>\n<td>Maximum extent of spot light from its direction (in degrees).</td>\n<td>60</td>\n</tr>\n<tr>\n<td>decay</td>\n<td>Amount the light dims along the distance of the light.</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>distance</td>\n<td>Distance where intensity becomes 0. If <code>distance</code> is <code>0</code>, then the point light does not decay with distance.</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>penumbra</td>\n<td>Percent of the spotlight cone that is attenuated due to penumbra.</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>target</td>\n<td>element the spot should point to. set to null to transform spotlight by orientation, pointing to it&#39;s -Z axis.</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<h2 id=\"configuring-shadows\">Configuring Shadows</h2>\n<p>A-Frame includes support for realtime shadow rendering. With proper\nconfiguration, objects (both moving or stationary) will cast shadows adding\ndepth and realism to a scene. Since shadows come with many properties, it\nis very helpful to <strong><a href=\"../introduction/visual-inspector-and-dev-tools.md\">use the A-Frame Inspector to configure shadows</a></strong></p>\n<p>Light types that support shadows (<code>point</code>, <code>spot</code>, and <code>directional</code>) include\nadditional properties:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Light type</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>castShadow</td>\n<td></td>\n<td>Whether this light casts shadows on the scene.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>shadowBias</td>\n<td></td>\n<td>Offset depth when deciding whether a surface is in shadow. Tiny adjustments here (in the order of +/-0.0001) may reduce artifacts in shadows.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>shadowCameraBottom</td>\n<td><code>directional</code></td>\n<td>Bottom plane of shadow camera frustum.</td>\n<td>-5</td>\n</tr>\n<tr>\n<td>shadowCameraFar</td>\n<td></td>\n<td>Far plane of shadow camera frustum.</td>\n<td>500</td>\n</tr>\n<tr>\n<td>shadowCameraFov</td>\n<td><code>point</code>, <code>spot</code></td>\n<td>Shadow camera&#39;s FOV.</td>\n<td>50</td>\n</tr>\n<tr>\n<td>shadowCameraLeft</td>\n<td><code>directional</code></td>\n<td>Left plane of shadow camera frustum.</td>\n<td>-5</td>\n</tr>\n<tr>\n<td>shadowCameraNear</td>\n<td></td>\n<td>Near plane of shadow camera frustum.</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>shadowCameraRight</td>\n<td><code>directional</code></td>\n<td>Right plane of shadow camera frustum.</td>\n<td>5</td>\n</tr>\n<tr>\n<td>shadowCameraTop</td>\n<td><code>directional</code></td>\n<td>Top plane of shadow camera frustum.</td>\n<td>5</td>\n</tr>\n<tr>\n<td>shadowCameraVisible</td>\n<td></td>\n<td>Displays a visual aid showing the shadow camera&#39;s position and frustum. This is the light&#39;s view of the scene, used to project shadows.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>shadowMapHeight</td>\n<td></td>\n<td>Shadow map&#39;s vertical resolution. Larger shadow maps display more crisp shadows, at the cost of performance.</td>\n<td>512</td>\n</tr>\n<tr>\n<td>shadowMapWidth</td>\n<td></td>\n<td>Shadow map&#39;s horizontal resolution.</td>\n<td>512</td>\n</tr>\n</tbody></table>\n<h3 id=\"adding-real-time-shadows\">Adding Real-Time Shadows</h3>\n<blockquote>\n<p>NOTE: Real-time shadows add performance overhead. When objects in a scene are\nstationary, or especially when optimizing for mobile devices, be aware of\nother techniques for realistic shadows, such as <a href=\"#todo\">baking light and shadow\ninformation into a texture</a> before importing assets into\nA-Frame.</p>\n</blockquote>\n<ul>\n<li><strong>1. Create at least one light</strong> with <code>castShadow: true</code>. Three light types\nsupport shadows (<code>point</code>, <code>spot</code>, and <code>directional</code>). Of the three,\n<code>directional</code> lights will have the best performance. Combining an ambient\nlight (without shadows) and a directional light (with shadows) is a good\nplace to start.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-entity light=&quot;type: ambient; intensity: 0.5;&quot;&gt;&lt;/a-entity&gt;\n  &lt;a-entity light=&quot;type: directional;\n                   castShadow: true;\n                   intensity: 0.4;\n                   shadowCameraVisible: true;&quot;\n            position=&quot;-5 3 1.5&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<p>In the example above, the directional light has lower intensity than the\nambient light, for slightly softer shadows. Adding <code>shadowCameraVisible: true</code>\ncreates a visual aid for debugging: objects outside the camera&#39;s view cannot\ncast or receive shadows.</p>\n<ul>\n<li><strong>2. Add the shadow component</strong> to objects in the scene that should cast or\nreceive shadows.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;a-gltf-model src=&quot;tree.gltf&quot; shadow=&quot;cast: true&quot;&gt;&lt;/a-gltf-model&gt;\n&lt;a-circle id=&quot;ground&quot; radius=&quot;10&quot; rotation=&quot;-90 0 0&quot; shadow=&quot;receive: true&quot;&gt;&lt;/a-circle&gt;</code></pre>\n<ul>\n<li><p><strong>3. Adjust the shadow camera</strong> position and frustum (<code>shadowCameraTop</code>,\n<code>shadowCameraRight</code>, ...) of the directional light, until it envelops the\nscene tightly. If the frustum is too small, shadows will be missing or\npartially clipped. If the frustum is too large, shadows will appear coarse or\npixelated. The size of the shadow map (<code>shadowMapHeight: 512</code>, <code>shadowMapWidth:\n512</code>) determines the resolution at which shadows are computed, so tightly\nsizing the shadow camera around your scene will make the best use of this\nresolution and device performance.</p>\n</li>\n<li><p><strong>4. Refine</strong> shadow appearance. Scene-wide options, affecting all lights,\nmay be configured on the scene&#39;s shadow system.</p>\n</li>\n</ul>\n<h2 id=\"shadow-system-properties\">Shadow System Properties</h2>\n<p>These global options affect the entire scene, and are set using the <code>shadow</code>\nsystem on the <code>&lt;a-scene&gt;</code> root element.</p>\n<pre><code class=\"language-html\">&lt;a-scene shadow=&quot;type: pcfsoft&quot;&gt;\n  &lt;!-- ... --&gt;\n&lt;/a-scene&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>Defines shadow map type (<code>basic</code>, <code>pcf</code>, <code>pcfsoft</code>) with varying appearance and performance characteristics.</td>\n<td><code>pcf</code></td>\n</tr>\n</tbody></table>\n",
      "title": "light",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/light.js",
      "examples": [
        {
          "title": "Animated Lights",
          "src": "https://glitch.com/edit/#!/aframe-animated-lights?path=index.html"
        }
      ],
      "excerpt": "<p>The light component defines the entity as a source of light. Light affects all\nmaterials that have not specified a flat shading model with <code>shader: flat</code>.\nNote that lights are computationally expensive we should limit number of lights\nin a scene.</p>"
    },
    {
      "id": "line",
      "contents": "<p>The line component draws a line given a start coordinate and end coordinate\nusing <a href=\"https://threejs.org/docs/#api/objects/Line\"><code>THREE.Line</code></a>.</p>\n<p>The <a href=\"./raycaster.md\">raycaster component</a> uses the line component for its <code>showLine</code>\nproperty, which is then used by the <a href=\"./laser-controls.md\">laser-controls component</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity line=&quot;start: 0, 1, 0; end: 2 0 -5; color: red&quot;\n          line__2=&quot;start: -2, 4, 5; end: 0 4 -3; color: green&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>Note an entity can have multiple lines. The line mesh is set as <code>line</code> or\n<code>line__&lt;ID&gt;</code> in the entity&#39;s <code>object3DMap</code>:</p>\n<pre><code class=\"language-js\">console.log(el.getObject3D(&#39;line&#39;));\nconsole.log(el.getObject3D(&#39;line__2&#39;));</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>start</td>\n<td>Start point coordinate.</td>\n<td>0, 0, 0</td>\n</tr>\n<tr>\n<td>end</td>\n<td>End coordinate.</td>\n<td>0, 0, 0</td>\n</tr>\n<tr>\n<td>color</td>\n<td>Line color.</td>\n<td>#74BEC1</td>\n</tr>\n<tr>\n<td>opacity</td>\n<td>Line opacity.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>visible</td>\n<td>Whether the material visible.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n",
      "title": "line",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/line.js",
      "examples": [],
      "excerpt": "<p>The line component draws a line given a start coordinate and end coordinate\nusing <a href=\"https://threejs.org/docs/#api/objects/Line\"><code>THREE.Line</code></a>.</p>"
    },
    {
      "id": "link",
      "contents": "<p>The link component connects between experiences and allows for traversing\nbetween VR web pages. When activated via an event, the link component sends the\nuser to a different page, just like a normal web page redirect. To maintain VR\nacross pages, the following conditions must apply:</p>\n<ul>\n<li>The browser is up-to-date with the WebVR specification and implements the <code>vrdisplayactivate</code> event.</li>\n<li>The destination web page listens to the window [<code>vrdisplayactivate</code>] event and enters VR. A-Frame experiences behave this way by default.</li>\n<li>At the moment, in-VR navigation is only implemented by Firefox desktop,\nOculus Browser, Samsung Internet, and Supermedium.</li>\n</ul>\n<h2 id=\"link-ux\">Link UX</h2>\n<p>A link in VR can be anything such as grabbing onto an object, placing something\non our head, clicking something, even eating something! We provide a default\nimplementation of links as a portal or window, using a 360&deg; image thumbnail\nto preview the destination.</p>\n<p>The UX of link traversal will continue to refine as we iterate and experiment,\nboth in content and from the browser.</p>\n<h3 id=\"controls\">Controls</h3>\n<p>The default UX of the link component as a portal can be interacted with using a\ncursor or controllers. This is not provided directly in the A-Frame core, but\nthere is a <a href=\"https://github.com/aframevr/aframe/blob/master/examples/showcase/link-traversal/js/components/link-controls.js\">link-controls component in the A-Frame examples</a>. This component\nshows tooltips and provides button mappings for peeking and entering portals.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;img id=&quot;homeThumbnail&quot; src=&quot;home.jpg&quot;&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity link=&quot;href: index.html; title: My Homepage; image: #homeThumbnail&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<p>We also provide a link primitive with a different syntax:</p>\n<pre><code class=\"language-html\">&lt;a-link href=&quot;index.html&quot; title=&quot;My Homepage&quot; image=&quot;#homeThumbnail&quot;&gt;&lt;/a-link&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>backgroundColor</td>\n<td>Inner (background) color of the portal.</td>\n<td>red</td>\n</tr>\n<tr>\n<td>borderColor</td>\n<td>Border color of the portal.</td>\n<td>white</td>\n</tr>\n<tr>\n<td>highlighted</td>\n<td>Boolean to toggle link highlight color.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>highlightedColor</td>\n<td>Border color when highlighted.</td>\n<td>&#39;#24CAFF&#39;</td>\n</tr>\n<tr>\n<td>href</td>\n<td>Destination URL where the link points to.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>image</td>\n<td>360&deg; image used as scene preview in the portal. Can be a selector to an <code>&lt;img&gt;</code> element or a URL.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>on</td>\n<td>Event to listen to that triggers link traversal.</td>\n<td>&#39;click&#39;</td>\n</tr>\n<tr>\n<td>peekMode</td>\n<td>Whether the 360&deg; image is fully expanded for preview.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>title</td>\n<td>Text displayed on the link. The <code>href</code> or page URL is used if not defined.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>titleColor</td>\n<td>Color of the text displayed on the link.</td>\n<td>white</td>\n</tr>\n<tr>\n<td>visualAspectEnabled</td>\n<td>Whether to enable the default visual appearance of a portal. Set to false if we want to implement our own pattern or form of link traversal.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h2 id=\"manually-navigating\">Manually Navigating</h2>\n<p>To navigate manually, use <code>window.location</code> API. See this <a href=\"https://stackoverflow.com/questions/503093/how-do-i-redirect-to-another-webpage\">StackOverflow question on navigating</a>. For example:</p>\n<pre><code class=\"language-js\">window.location.href = &#39;https://supermedium.com/supercraft/&#39;;\n// or window.location.replace</code></pre>\n",
      "title": "link",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "image": {
        "src": "https://user-images.githubusercontent.com/674727/27721720-19388346-5d17-11e7-912b-499886be0a8d.gif"
      },
      "source_code": "src/components/link.js",
      "examples": [],
      "excerpt": "<p>The link component connects between experiences and allows for traversing\nbetween VR web pages. When activated via an event, the link component sends the\nuser to a different page, just like a normal web page redirect. To maintain VR\nacross pages, the following conditions must apply:</p>"
    },
    {
      "id": "loading-screen",
      "contents": "<p>The loading screen component configures the loading screen visual style.</p>\n<p>To configure the style of the loader title bar one can redefine\n<code>.a-loader-title</code> style. The example below sets the text color to red:</p>\n<pre><code class=\"language-css\"> .a-loader-title {\n   color: red;\n }</code></pre>\n<p>The title text is set to whatever is in <code>document.title</code> or <code>&lt;title&gt;&lt;/title&gt;</code>.</p>\n<h2 id=\"example\">Example</h2>\n<p>The example below sets the background color to black and dots color to red.</p>\n<pre><code class=\"language-html\">&lt;a-scene loading-screen=&quot;dotsColor: red; backgroundColor: black&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dotsColor</td>\n<td>Loader dots color.</td>\n<td>white</td>\n</tr>\n<tr>\n<td>backgroundColor</td>\n<td>Loader background color.</td>\n<td>#24CAFF</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>Enables / Disables the loading screen.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n",
      "title": "loading-screen",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "examples": [],
      "excerpt": "<p>The loading screen component configures the loading screen visual style.</p>"
    },
    {
      "id": "look-controls",
      "contents": "<p>The look-controls component:</p>\n<ul>\n<li>Rotates the entity when we rotate a VR head-mounted display (HMD).</li>\n<li>Rotates the entity when we move the mouse.</li>\n<li>Rotates the entity when we touch-drag the touchscreen.</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p>The look-controls component is usually used alongside the <a href=\"camera.md\">camera\ncomponent</a>.</p>\n<pre><code class=\"language-html\">&lt;a-entity camera look-controls position=&quot;0 1.6 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enabled</td>\n<td>Whether look controls are enabled.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>hmdEnabled</td>\n<td>Whether to use VR headset pose in VR mode.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>reverseMouseDrag</td>\n<td>Whether to reverse mouse drag.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>reverseTouchDrag</td>\n<td>Whether to reverse touch drag.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>touchEnabled</td>\n<td>Whether to use touch controls in magic window mode.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>pointerLockEnabled</td>\n<td>Whether to hide the cursor using the <a href=\"https://developer.mozilla.org/docs/Web/API/Pointer_Lock_API\">Pointer Lock API</a>.</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h2 id=\"customizing-look-controls\">Customizing look-controls</h2>\n<p>While A-Frame&#39;s look-controls component is primarily meant for VR with sensible\ndefaults to work across platforms, many developers want to use A-Frame for\nnon-VR use cases (e.g., desktop, touchscreen). We might want to modify the\nmouse and touch behaviors.</p>\n<p>The best way to configure the behavior is to <a href=\"https://github.com/aframevr/aframe/blob/master/src/components/look-controls.js\">copy and customize the current\nlook-controls component code</a>. This allows us to configure the\ncontrols how we want (e.g., limit the pitch on touch, reverse one axis). If we\nwere to include every possible configuration into the core component, we would\nbe left maintaining a wide array of flags.</p>\n<p>The component lives within a Browserify/Webpack context so you&#39;ll need to\nreplace the <code>require</code> statements with A-Frame globals (e.g.,\n<code>AFRAME.registerComponent</code>, <code>window.THREE</code>), and get rid of the <code>module.exports</code>.</p>\n<h2 id=\"caveats\">Caveats</h2>\n<p>If you want to create your own component for look controls, you will have to\ncopy and paste the HMD-tracking bits into your component. In the future, we may\nhave a system for people to more easily create their controls.</p>\n",
      "title": "look-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/look-controls.js",
      "examples": [],
      "excerpt": "<p>The look-controls component:</p>"
    },
    {
      "id": "obj-model",
      "contents": "<p>The obj-model component loads a 3D model and material using a\n<a href=\"https://en.wikipedia.org/wiki/Wavefront_.obj_file\">Wavefront</a> (.OBJ) file and a .MTL file.</p>\n<h2 id=\"example\">Example</h2>\n<p>We can load an .OBJ model by pointing to assets that specify the path to an .OBJ and .MTL file.</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;a-asset-item id=&quot;tree-obj&quot; src=&quot;/path/to/tree.obj&quot;&gt;&lt;/a-asset-item&gt;\n    &lt;a-asset-item id=&quot;tree-mtl&quot; src=&quot;/path/to/tree.mtl&quot;&gt;&lt;/a-asset-item&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity obj-model=&quot;obj: #tree-obj; mtl: #tree-mtl&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>obj</td>\n<td>Selector to an <code>&lt;a-asset-item&gt;</code> pointing to a .OBJ file or an inline path to a .OBJ file.</td>\n</tr>\n<tr>\n<td>mtl</td>\n<td>Selector to an <code>&lt;a-asset-item&gt;</code> pointing to a .MTL file or an inline path to a .MTL file. Optional if you wish to use the <a href=\"./material.md\">material component</a> instead.</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>model-loaded</td>\n<td>.OBJ model has been loaded into the scene.</td>\n</tr>\n</tbody></table>\n<h2 id=\"loading-inline\">Loading Inline</h2>\n<p>We can also load assets by specifying the path directly within <code>url()</code>. Note this is less performant than going through the asset management system.</p>\n<pre><code class=\"language-html\">&lt;a-entity obj-model=&quot;obj: url(/path/to/tree.obj); mtl: url(/path/to/tree.mtl)&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"troubleshooting\">Troubleshooting</h2>\n<p>See <a href=\"../introduction/models.md#troubleshooting\">Introduction → 3D Models → Troubleshooting</a>.</p>\n<h2 id=\"additional-resources\">Additional Resources</h2>\n<p>We can find and download models on the web to drop into our scenes:</p>\n<ul>\n<li><a href=\"https://3dwarehouse.sketchup.com\">Sketchup&#39;s 3D Warehouse</a> - Repository of models.</li>\n<li><a href=\"https://clara.io\">Clara.io</a> - Repository of models.</li>\n<li><a href=\"https://www.blender.org/\">Blender</a> - A free open-source 3D modeling program with plenty of existing learning resources to create models.</li>\n</ul>\n",
      "title": "obj-model",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/obj-model.js",
      "examples": [
        {
          "title": "Modifying Material of Model",
          "src": "https://glitch.com/edit/#!/aframe-modify-model-material?path=index.html:1:0"
        }
      ],
      "excerpt": "<p>The obj-model component loads a 3D model and material using a\n<a href=\"https://en.wikipedia.org/wiki/Wavefront_.obj_file\">Wavefront</a> (.OBJ) file and a .MTL file.</p>"
    },
    {
      "id": "material",
      "contents": "<p>The material component gives appearance to an entity. We can define properties\nsuch as color, opacity, or texture. This is often paired with the <a href=\"./geometry.md\">geometry\ncomponent</a> which provides shape.</p>\n<p>We can register custom materials to extend the material component to provide a\nwide range of visual effects.</p>\n<!--toc-->\n\n<h2 id=\"example\">Example</h2>\n<p>Defining a red material using the default standard material:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;color: red&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>Here is an example of using a different material:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;shader: flat; color: red&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>Here is an example of using an example custom material:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: plane&quot;\n          material=&quot;shader: ocean; color: blue; wave-height: 10&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<p>The material component has some base properties. More properties are available\ndepending on the material type applied.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alphaTest</td>\n<td>Alpha test threshold for transparency.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>depthTest</td>\n<td>Whether depth testing is enabled when rendering the material.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>flatShading</td>\n<td>Use <code>THREE.FlatShading</code> rather than <code>THREE.StandardShading</code>.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>npot</td>\n<td>Use settings for non-power-of-two (NPOT) texture.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>offset</td>\n<td>Texture offset to be used.</td>\n<td>{x: 0, y: 0}</td>\n</tr>\n<tr>\n<td>opacity</td>\n<td>Extent of transparency. If the <code>transparent</code> property is not <code>true</code>, then the material will remain opaque and <code>opacity</code> will only affect color.</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>repeat</td>\n<td>Texture repeat to be used.</td>\n<td>{x: 1, y: 1}</td>\n</tr>\n<tr>\n<td>shader</td>\n<td>Which material to use. Defaults to the <a href=\"#standard\">standard material</a>. Can be set to the <a href=\"#flat\">flat material</a> or to a registered custom shader material.</td>\n<td>standard</td>\n</tr>\n<tr>\n<td>side</td>\n<td>Which sides of the mesh to render. Can be one of <code>front</code>, <code>back</code>, or <code>double</code>.</td>\n<td>front</td>\n</tr>\n<tr>\n<td>transparent</td>\n<td>Whether material is transparent. Transparent entities are rendered after non-transparent entities.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>vertexColors</td>\n<td>Whether to use vertex or face colors to shade the material. Can be one of <code>none</code>, <code>vertex</code>, or <code>face</code>.</td>\n<td>none</td>\n</tr>\n<tr>\n<td>visible</td>\n<td>Whether material is visible. Raycasters will ignore invisible materials.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>blending</td>\n<td>The blending mode for the material&#39;s RGB and Alpha sent to the WebGLRenderer. Can be one of <code>none</code>, <code>normal</code>, <code>additive</code>, <code>subtractive</code> or <code>multiply</code>.</td>\n<td>normal</td>\n</tr>\n<tr>\n<td>dithering</td>\n<td>Whether material is dithered with noise. Removes banding from gradients like ones produced by lighting.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>materialtextureloaded</td>\n<td>Texture loaded onto material.</td>\n</tr>\n<tr>\n<td>materialvideoloadeddata</td>\n<td>Video data loaded and is going to play.</td>\n</tr>\n<tr>\n<td>materialvideoended</td>\n<td>For video textures, emitted when the video has reached its end (may not work with <code>loop</code>).</td>\n</tr>\n</tbody></table>\n<h2 id=\"built-in-materials\">Built-in Materials</h2>\n<p>A-Frame ships with a couple of built-in materials.</p>\n<h3 id=\"standard\"><code>standard</code></h3>\n<p>The <code>standard</code> material is the default material. It uses the physically-based\n<a href=\"https://threejs.org/docs/#api/materials/MeshStandardMaterial\">THREE.MeshStandardMaterial</a>.</p>\n<h4 id=\"properties-1\">Properties</h4>\n<p>These properties are available on top of the base material properties.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ambientOcclusionMap</td>\n<td>Ambient occlusion map. Used to add shadows to the mesh. Can either be a selector to an <code>&lt;img&gt;</code>, or an inline URL. Requires 2nd set of UVs (see below).</td>\n<td>None</td>\n</tr>\n<tr>\n<td>ambientOcclusionMapIntensity</td>\n<td>The intensity of the ambient occlusion map, a number between 0 and 1.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>ambientOcclusionTextureRepeat</td>\n<td>How many times the ambient occlusion texture repeats in the X and Y direction.</td>\n<td>1 1</td>\n</tr>\n<tr>\n<td>ambientOcclusionTextureOffset</td>\n<td>How the ambient occlusion texture is offset in the x y direction.</td>\n<td>0 0</td>\n</tr>\n<tr>\n<td>color</td>\n<td>Base diffuse color.</td>\n<td>#fff</td>\n</tr>\n<tr>\n<td>displacementMap</td>\n<td>Displacement map. Used to distort a mesh. Can either be a selector to an <code>&lt;img&gt;</code>, or an inline URL.</td>\n<td>None</td>\n</tr>\n<tr>\n<td>displacementScale</td>\n<td>The intensity of the displacement map effect</td>\n<td>1</td>\n</tr>\n<tr>\n<td>displacementBias</td>\n<td>The zero point of the displacement map.</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>displacementTextureRepeat</td>\n<td>How many times the displacement texture repeats in the X and Y direction.</td>\n<td>1 1</td>\n</tr>\n<tr>\n<td>displacementTextureOffset</td>\n<td>How the displacement texture is offset in the x y direction.</td>\n<td>0 0</td>\n</tr>\n<tr>\n<td>emissive</td>\n<td>The color of the emissive lighting component. Used to make objects produce light even without other lighting in the scene.</td>\n<td>#000</td>\n</tr>\n<tr>\n<td>emissiveIntensity</td>\n<td>Intensity of the emissive lighting component.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Height of video (in pixels), if defining a video texture.</td>\n<td>360</td>\n</tr>\n<tr>\n<td>envMap</td>\n<td>Environment cubemap texture for reflections. Can be a selector to <a-cubemap> or a comma-separated list of URLs.</td>\n<td>None</td>\n</tr>\n<tr>\n<td>fog</td>\n<td>Whether or not material is affected by <a href=\"./fog.md\">fog</a>.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>metalness</td>\n<td>How metallic the material is from <code>0</code> to <code>1</code>.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>normalMap</td>\n<td>Normal map. Used to add the illusion of complex detail. Can either be a selector to an <code>&lt;img&gt;</code>, or an inline URL.</td>\n<td>None</td>\n</tr>\n<tr>\n<td>normalScale</td>\n<td>Scale of the effect of the normal map in the X and Y directions.</td>\n<td>1 1</td>\n</tr>\n<tr>\n<td>normalTextureRepeat</td>\n<td>How many times the normal texture repeats in the X and Y direction.</td>\n<td>1 1</td>\n</tr>\n<tr>\n<td>normalTextureOffset</td>\n<td>How the normal texture is offset in the x y direction.</td>\n<td>0 0</td>\n</tr>\n<tr>\n<td>repeat</td>\n<td>How many times a texture (defined by <code>src</code>) repeats in the X and Y direction.</td>\n<td>1 1</td>\n</tr>\n<tr>\n<td>roughness</td>\n<td>How rough the material is from <code>0</code> to <code>1</code>. A rougher material will scatter reflected light in more directions than a smooth material.</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>sphericalEnvMap</td>\n<td>Environment spherical texture for reflections. Can either be a selector to an <code>&lt;img&gt;</code>, or an inline URL.</td>\n<td>None</td>\n</tr>\n<tr>\n<td>width</td>\n<td>Width of video (in pixels), if defining a video texture.</td>\n<td>640</td>\n</tr>\n<tr>\n<td>wireframe</td>\n<td>Whether to render just the geometry edges.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>wireframeLinewidth</td>\n<td>Width in px of the rendered line.</td>\n<td>2</td>\n</tr>\n<tr>\n<td>src</td>\n<td>Image or video texture map. Can either be a selector to an <code>&lt;img&gt;</code> or <code>&lt;video&gt;</code>, or an inline URL.</td>\n<td>None</td>\n</tr>\n</tbody></table>\n<h4 id=\"physically-based-shading\">Physically-Based Shading</h4>\n<p>Physically-based shading is a shading model that aims to make materials behave\nrealistically to lighting conditions. Appearance is a result of the interaction\nbetween the incoming light and the properties of the material.</p>\n<p>To achieve realism, the diffuse <code>color</code>, <code>metalness</code>, <code>roughness</code> properties of\nthe material must be accurately controlled, often based on real-world material\nstudies. Some people have compiled charts of realistic values for different\nkinds of materials that we can use as a starting point.</p>\n<p>For example, for a tree bark material, as an estimation, we might set:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: cylinder&quot;\n          material=&quot;src: treebark.png; color: #696969; roughness: 1; metalness: 0&quot;&gt;\n&lt;/a-entity&gt;</code></pre>\n<h4 id=\"distortion-maps\">Distortion Maps</h4>\n<p>There are three properties which give the illusion of complex geometry:</p>\n<ul>\n<li><strong>Ambient occlusion maps</strong> - Applies subtle shadows in areas that receive less\nambient light. Direct (point, directional) lights do not affect ambient occlusion\nmaps. Baked ambient occlusion requires a 2nd set of UVs, which may be added to\nthe mesh in modeling software or using JavaScript.</li>\n<li><strong>Displacement maps</strong> - Distorts a simpler model at a high resolution\nallowing more detail. This will affect the mesh&#39;s silhouette but can be\nexpensive.</li>\n<li><strong>Normal maps</strong> - Defines the angle of the surface at that point. Giving the\nappearance of complex geometry without distorting the model. This does not\nchange the geometry but normal maps are cheaper.</li>\n</ul>\n<h4 id=\"environment-maps\">Environment Maps</h4>\n<p>The <code>envMap</code> and <code>sphericalEnvMap</code> properties define what environment\nthe material reflects. The clarity of the environment reflection depends\non the <code>metalness</code>, and <code>roughness</code> properties.</p>\n<p>The <code>sphericalEnvMap</code> property takes a single spherical mapped\ntexture. Of the kind you would assign to a <code>&lt;a-sky&gt;</code>.</p>\n<p>Unlike textures, the <code>envMap</code> property takes a cubemap, six images put together\nto form a cube. The cubemap wraps around the mesh and applied as a texture.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;a-cubemap id=&quot;sky&quot;&gt;\n      &lt;img src=&quot;right.png&quot;&gt;\n      &lt;img src=&quot;left.png&quot;&gt;\n      &lt;img src=&quot;top.png&quot;&gt;\n      &lt;img src=&quot;bottom.png&quot;&gt;\n      &lt;img src=&quot;front.png&quot;&gt;\n      &lt;img src=&quot;back.png&quot;&gt;\n    &lt;/a-cubemap&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;envMap: #sky; roughness: 0&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<h3 id=\"flat\"><code>flat</code></h3>\n<p>The <code>flat</code> material uses the <a href=\"https://threejs.org/docs/#api/materials/MeshBasicMaterial\">THREE.MeshBasicMaterial</a>. Flat materials\nare not affected by the scene&#39;s lighting conditions. This is useful for things\nsuch as images or videos. Set <code>shader</code> to <code>flat</code>:</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: plane&quot; material=&quot;shader: flat; src: #cat-image&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h4 id=\"properties-2\">Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>Base diffuse color.</td>\n<td>#fff</td>\n</tr>\n<tr>\n<td>fog</td>\n<td>Whether or not material is affected by <a href=\"./fog.md\">fog</a>.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>height</td>\n<td>Height of video (in pixels), if defining a video texture.</td>\n<td>360</td>\n</tr>\n<tr>\n<td>repeat</td>\n<td>How many times a texture (defined by <code>src</code>) repeats in the X and Y direction.</td>\n<td>1 1</td>\n</tr>\n<tr>\n<td>src</td>\n<td>Image or video texture map. Can either be a selector to an <code>&lt;img&gt;</code> or <code>&lt;video&gt;</code>, or an inline URL.</td>\n<td>None</td>\n</tr>\n<tr>\n<td>width</td>\n<td>Width of video (in pixels), if defining a video texture.</td>\n<td>640</td>\n</tr>\n<tr>\n<td>wireframe</td>\n<td>Whether to render just the geometry edges.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>wireframeLinewidth</td>\n<td>Width in px of the rendered line.</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<h2 id=\"textures\">Textures</h2>\n<p>To set a texture using one of the built-in materials, specify the <code>src</code>\nproperty. <code>src</code> can be a selector to either an <code>&lt;img&gt;</code> or <code>&lt;video&gt;</code> element in the\n<a href=\"../core/asset-management-system.md\">asset management system</a>:</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;img id=&quot;my-texture&quot; src=&quot;texture.png&quot;&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;src: #my-texture&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<p><code>src</code> can also be an inline URL. Note that we do not get browser caching or\npreloading through this method.</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;src: url(texture.png)&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<p>Most of the other properties works together with textures. For example, the\n<code>color</code> property will act as the base color and multiplies per pixel with the\ntexture. Set it to <code>#fff</code> to maintain the original colors of the texture.</p>\n<p>A-Frame caches textures so as to not push redundant textures to the GPU.</p>\n<h3 id=\"video-textures\">Video Textures</h3>\n<p>Whether the video texture loops or autoplays depends on the video element used\nto create the texture. If we simply pass a URL instead of creating and passing\na video element, then the texture will loop and autoplay by default. To specify\notherwise, create a video element in the asset management system, and pass a\nselector for the <code>id</code> attribute (e.g., <code>#my-video</code>):</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;!-- No loop. --&gt;\n    &lt;video id=&quot;my-video&quot; src=&quot;video.mp4&quot; autoplay=&quot;true&quot;&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity geometry=&quot;primitive: box&quot; material=&quot;src: #my-video&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<h4 id=\"controlling-video-textures\">Controlling Video Textures</h4>\n<p>To control the video playback such as pausing or seeking, we can use the video\nelement to <a href=\"https://developer.mozilla.org/docs/Web/Guide/HTML/Using_HTML5_audio_and_video#Controlling_media_playback\">control media playback</a>. For example:</p>\n<pre><code class=\"language-js\">var videoEl = document.querySelector(&#39;#my-video&#39;);\nvideoEl.currentTime = 122;  // Seek to 122 seconds.\nvideoEl.pause();</code></pre>\n<p>This doesn&#39;t work as well if you are passing an inline URL, in which case\nA-Frame creates a video element internally. To get a handle on the video\nelement, we should define one in <code>&lt;a-assets&gt;</code>.</p>\n<h2 id=\"canvas-textures\">Canvas Textures</h2>\n<p>We can use a <code>&lt;canvas&gt;</code> as a texture source. The texture will automatically\nrefresh itself as the canvas changes.</p>\n<pre><code class=\"language-html\">&lt;script&gt;\n  AFRAME.registerComponent(&#39;draw-canvas&#39;, {\n    schema: {default: &#39;&#39;},\n\n    init: function () {\n      this.canvas = document.getElementById(this.data);\n      this.ctx = this.canvas.getContext(&#39;2d&#39;);\n\n      // Draw on canvas...\n    }\n  });\n&lt;/script&gt;\n\n&lt;a-assets&gt;\n  &lt;canvas id=&quot;my-canvas&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/canvas&gt;\n&lt;/a-assets&gt;\n\n&lt;a-entity geometry=&quot;primitive: plane&quot; material=&quot;src: #my-canvas&quot;\n          draw-canvas=&quot;my-canvas&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h3 id=\"repeating-textures\">Repeating Textures</h3>\n<p>We might want to repeat tile textures rather than having them stretch. The <code>repeat</code>\nproperty can repeat textures.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: plane; width: 100&quot;\n          material=&quot;src: carpet.png; repeat: 100 20&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"transparency-issues\">Transparency Issues</h2>\n<p>Transparency and alpha channels are tricky in 3D graphics. If you are having\nissues where transparent materials in the foreground do not composite correctly\nover materials in the background, the issues are probably due to underlying\ndesign of the OpenGL compositor (which WebGL is an API for).</p>\n<p>In an ideal scenario, transparency in A-Frame would &quot;just work&quot;, regardless of\nwhere the developer places an entity in 3D space, or in which order they define\nthe elements in markup. We can often run into scenarios where foreground\nentities occlude background entities. This creates confusion and unwanted\nvisual defects.</p>\n<p>To work around this issue, try changing the order of the entities in the HTML.</p>\n<p>When using PNG images as cutouts or masks (where part of the image should be\nfully transparent, and the rest fully opaque), try setting <code>transparent: false</code>\nand like <code>alphaTest: 0.5</code> to solve transparency issues. Play around with the alpha\ntest value.</p>\n<h3 id=\"render-order-component\"><code>render-order</code> Component</h3>\n<p>Use the <a href=\"https://github.com/supermedium/superframe/tree/master/components/render-order#aframe-render-order-component\">render-order component</a> to tell the render to sort transparent objects\nby depth and to be able to manually define render order of entities in HTML via\nnamed layers. If you have transparency ordering issues, use this component.</p>\n<h2 id=\"register-a-custom-shader-material\">Register a Custom Shader Material</h2>\n<p>We can register custom shader materials for appearances and effects using\n<code>AFRAME.registerShader</code>.</p>\n<p>Let&#39;s walk through an <a href=\"https://codepen.io/machenmusik/pen/WZyQNj\">example CodePen</a> with step-by-step commentary.\nAs always, we need to include the A-Frame script.</p>\n<pre><code class=\"language-js\">&lt;script src=&quot;https://aframe.io/releases/1.0.4/aframe.min.js&quot;&gt;&lt;/script&gt;</code></pre>\n<p>Next, we define any components and shaders we need after the A-Frame\nscript but before the scene declaration. Here, we begin our <code>my-custom</code> shader.\nThe schema declares any parameters for the shader.</p>\n<pre><code class=\"language-js\">&lt;script&gt;\nAFRAME.registerShader(&#39;my-custom&#39;, {\n  schema: {\n    // ...\n  }\n});\n&lt;/script&gt;</code></pre>\n<p>We usually want to support the <code>color</code> and <code>opacity</code> properties.  <code>is:\n&#39;uniform&#39;</code> tells A-Frame this property should appear as uniform value in the\nshaders:</p>\n<pre><code class=\"language-js\">&lt;script&gt;\nAFRAME.registerShader(&#39;my-custom&#39;, {\n  schema: {\n    color: {type: &#39;color&#39;, is: &#39;uniform&#39;, default: &#39;red&#39;},\n    opacity: {type: &#39;number&#39;, is: &#39;uniform&#39;, default: 1.0}\n  }\n});\n&lt;/script&gt;</code></pre>\n<p>Setting <code>raw</code> to <code>true</code> uses <a href=\"https://threejs.org/docs/#api/en/materials/RawShaderMaterial\">THREE.RawShaderMaterial</a> instead of\n<a href=\"https://threejs.org/docs/#api/en/materials/ShaderMaterial\">ShaderMaterial</a> so built-in uniforms and attributes are not\nautomatically added to your shader code. Here we want to include the usual\nprefixes with GLSL constants and such, so leave it <code>false</code>.</p>\n<pre><code class=\"language-js\">  raw: false,</code></pre>\n<p>We&#39;re going to use the default vertex shader by omitting <code>vertexShader</code>.  Note\nthat if our fragment shader cares about texture coordinates, our vertex shader\nshould set <code>varying</code> values to use in the fragment shader.</p>\n<p>Since almost every WebVR-capable browser supports ES6, we define our fragment\nshader as a multi-line string:</p>\n<pre><code class=\"language-js\">  fragmentShader:\n`\n  // Use medium precision.\n  precision mediump float;\n\n  // This receives the color value from the schema, which becomes a vec3 in the shader.\n  uniform vec3 color;\n\n  // This receives the opacity value from the schema, which becomes a number.\n  uniform float opacity;\n\n  // This is the shader program.\n  // A fragment shader can set the color via gl_FragColor,\n  // or decline to draw anything via discard.\n  void main () {\n    // Note that this shader doesn&#39;t use texture coordinates.\n    // Set the RGB portion to our color,\n    // and the alpha portion to our opacity.\n    gl_FragColor = vec4(color, opacity);\n  }\n`\n});\n&lt;/script&gt;</code></pre>\n<p>And using our shader from the <code>material</code> component:</p>\n<pre><code class=\"language-html\">&lt;!-- A box using our shader, not fully opaque and blue. --&gt;\n&lt;a-box material=&quot;shader: my-custom; color: blue; opacity: 0.7; transparent: true&quot; position=&quot;0 0 -2&quot;&gt;&lt;/a-box&gt;</code></pre>\n<h3 id=\"registershader\"><code>registerShader</code></h3>\n<p>Like components, custom materials have schema and lifecycle handlers.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fragmentShader</td>\n<td>Optional string containing the fragment shader. If omitted, a simple default is used.</td>\n</tr>\n<tr>\n<td>init</td>\n<td>Optional lifecycle handler called once during shader initialization. Used to create the material.</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>Optional. If true, uses THREE.RawShaderMaterial to accept shaders verbatim. If false (default), uses THREE.ShaderMaterial.</td>\n</tr>\n<tr>\n<td>schema</td>\n<td>Defines properties, uniforms, attributes that the shader will use to extend the material component.</td>\n</tr>\n<tr>\n<td>update</td>\n<td>Optional lifecycle handler called once during shader initialization and when data is updated. Used to update the material or shader.</td>\n</tr>\n<tr>\n<td>vertexShader</td>\n<td>Optional string containing the vertex shader. If omitted, a simple default is used.</td>\n</tr>\n</tbody></table>\n<h3 id=\"schema\">Schema</h3>\n<p>We can define material properties just as we would with component properties.\nThe data will act as the data we use to create our material:</p>\n<pre><code class=\"language-js\">AFRAME.registerShader(&#39;custom&#39;, {\n  schema: {\n    emissive: {default: &#39;#000&#39;},\n    wireframe: {default: false}\n  }\n});</code></pre>\n<p>To pass data values into the shader(s) as uniform values, include <code>is:\n&#39;uniform&#39;</code> in the definition:</p>\n<pre><code class=\"language-js\">AFRAME.registerShader(&#39;my-custom&#39;, {\n  schema: {\n    color: {type:&#39;color&#39;, is:&#39;uniform&#39;, default:&#39;red&#39;},\n    opacity: {type:&#39;number&#39;, is:&#39;uniform&#39;, default:1.0}\n  },\n  ...</code></pre>\n<h2 id=\"supported-uniform-types\">Supported Uniform Types</h2>\n<p>The uniform types supported by A-Frame are summarized in the table below.  Note\nthat <code>time</code> can eliminate the need for a <code>tick()</code> handler in many cases.</p>\n<table>\n<thead>\n<tr>\n<th>A-Frame Type</th>\n<th>THREE Type</th>\n<th>GLSL Shader Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>array</td>\n<td>v3</td>\n<td>vec3</td>\n</tr>\n<tr>\n<td>color</td>\n<td>v3</td>\n<td>vec3</td>\n</tr>\n<tr>\n<td>int</td>\n<td>i</td>\n<td>int</td>\n</tr>\n<tr>\n<td>number</td>\n<td>f</td>\n<td>float</td>\n</tr>\n<tr>\n<td>map</td>\n<td>t</td>\n<td>map</td>\n</tr>\n<tr>\n<td>time</td>\n<td>f</td>\n<td>float (milliseconds)</td>\n</tr>\n<tr>\n<td>vec2</td>\n<td>v2</td>\n<td>vec2</td>\n</tr>\n<tr>\n<td>vec3</td>\n<td>v3</td>\n<td>vec3</td>\n</tr>\n<tr>\n<td>vec4</td>\n<td>v4</td>\n<td>vec4</td>\n</tr>\n</tbody></table>\n<h3 id=\"example---glsl-and-shaders\">Example - GLSL and Shaders</h3>\n<p>For more customized visual effects, we can write GLSL shaders and apply them to\nA-Frame entities.</p>\n<blockquote>\n<p>NOTE: GLSL, the syntax used to write shaders, may seem a bit scary at first.\nFor a gentle (and free!) introduction, we recommend <a href=\"http://thebookofshaders.com/\">The Book of\nShaders</a>.</p>\n</blockquote>\n<p>Here are the vertex and fragment shaders we&#39;ll use:</p>\n<pre><code class=\"language-glsl\">// vertex.glsl\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}</code></pre>\n<pre><code class=\"language-glsl\">// fragment.glsl\n\nvarying vec2 vUv;\nuniform vec3 color;\nuniform float timeMsec; // A-Frame time in milliseconds.\n\nvoid main() {\n  float time = timeMsec / 1000.0; // Convert from A-Frame milliseconds to typical time in seconds.\n  // Use sin(time), which curves between 0 and 1 over time,\n  // to determine the mix of two colors:\n  //    (a) Dynamic color where &#39;R&#39; and &#39;B&#39; channels come\n  //        from a modulus of the UV coordinates.\n  //    (b) Base color.\n  //\n  // The color itself is a vec4 containing RGBA values 0-1.\n  gl_FragColor = mix(\n    vec4(mod(vUv , 0.05) * 20.0, 1.0, 1.0),\n    vec4(color, 1.0),\n    sin(time)\n  );\n}</code></pre>\n<p>To use these vertex and fragment shaders, after reading them into strings\n<code>vertexShader</code> and <code>fragmentShader</code>, we register our custom shader with\nA-Frame:</p>\n<pre><code class=\"language-js\">// shader-grid-glitch.js\n\nAFRAME.registerShader(&#39;grid-glitch&#39;, {\n  schema: {\n    color: {type: &#39;color&#39;, is: &#39;uniform&#39;},\n    timeMsec: {type: &#39;time&#39;, is: &#39;uniform&#39;}\n  },\n\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader\n});</code></pre>\n<p>And using from HTML markup:</p>\n<pre><code class=\"language-html\">&lt;a-sphere material=&quot;shader:grid-glitch; color: blue;&quot; radius=&quot;0.5&quot; position=&quot;0 1.5 -2&quot;&gt;&lt;/a-sphere&gt;</code></pre>\n<ul>\n<li><a href=\"https://aframe-simpler-shader.glitch.me/\">Live demo</a></li>\n<li><a href=\"https://glitch.com/edit/#!/aframe-simpler-shader\">Remix this on Glitch</a></li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1848368/24825516/abb98abe-1bd4-11e7-8262-93d3efb6056f.gif\" alt=\"5093034e-97f2-40dc-8cb9-28ca75bfd75b-8043-00000dbc2e00268d\"></p>\n<hr>\n<p>For a more advanced example, <a href=\"https://glitch.com/edit/#!/aframe-displacement-registershader\">try Real-Time Vertex Displacement</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1848368/24825518/b52e5bf6-1bd4-11e7-8eb2-9a9c1ff82ce9.gif\" alt=\"b19320eb-802a-462a-afcd-3d0dd9480aee-861-000004c2a8504498\"></p>\n<h2 id=\"using-a-custom-shader-and-component-together\">Using a Custom Shader and Component Together</h2>\n<p>Let&#39;s take the real-time vertex displacement shader example above, and add the\ncapability to apply an offset based upon the camera&#39;s position. We declare\nthat offset as a uniform vec3 value <code>myOffset</code>:</p>\n<pre><code class=\"language-js\">AFRAME.registerShader(&#39;displacement-offset&#39;, {\n  schema: {\n    timeMsec: {type: &#39;time&#39;, is: &#39;uniform&#39;},\n    myOffset: {type: &#39;vec3&#39;, is: &#39;uniform&#39;}\n  },\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader\n});</code></pre>\n<p>Used by <a href=\"https://glitch.com/edit/#!/aframe-displacement-offset-registershader?path=displacement-offset-shader.js:1:0\">this vertex shader</a>. So how do we update\n<code>myOffset</code> to be the camera position from A-Frame such that the vertex shader\nbehaves correctly? The typical method to do this in A-Frame is to create a\ncomponent with the desired functionality, and attach it to the appropriate\nentity.</p>\n<p>Note that the shader property is exposed via the <code>material</code> component, so we\nmodify the single property of interest using a form of <code>setAttribute()</code>. As\nbest practice to avoid creating garbage for performance reasons:</p>\n<ul>\n<li>Do not use the form of <code>setAttribute</code> that takes an object as second argument.</li>\n<li>Create a component property to hold the offset, to avoid creating a new <code>THREE.Vector3</code> every tick.</li>\n</ul>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;myoffset-updater&#39;, {\n  init: function () {\n    this.offset = new THREE.Vector3();\n  },\n\n  tick: function (t, dt) {\n    this.offset.copy(this.el.sceneEl.camera.el.getAttribute(&#39;position&#39;));\n    this.offset.y = 0;\n    this.el.setAttribute(&#39;material&#39;, &#39;myOffset&#39;, this.offset);\n  }\n});</code></pre>\n<p>We then apply the component to the entity with the custom shader:</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-sphere\n    animation=&quot;property: scale; dir: alternate; dur: 5000; loop: true; to: 4 4 4&quot;\n    geometry=&quot;radius: 0.2&quot;\n    material=&quot;shader: displacement-offset&quot;\n    myoffset-updater\n    position=&quot;0 1.5 -2&quot;&gt;\n  &lt;/a-sphere&gt;\n  &lt;a-box color=&quot;#CCC&quot; width=&quot;3&quot; depth=&quot;3&quot; height=&quot;0.1&quot; position=&quot;0 0 -2&quot;&gt;&lt;/a-box&gt;\n&lt;/a-scene&gt;</code></pre>\n<p>Voila!</p>\n<ul>\n<li><a href=\"https://aframe-displacement-offset-registershader.glitch.me/\">Live demo</a></li>\n<li><a href=\"https://glitch.com/edit/#!/aframe-displacement-offset-registershader\">Remix this on Glitch</a></li>\n</ul>\n<p>Another good example of using a component to set shader values is the <a href=\"https://aframe.io/aframe/examples/test/shaders/\">A-Frame\nShaders example</a>.  This\ncomponent reacts to <code>rotation</code> updates to the element with id <code>orbit</code> by\ncomputing the <code>sunPosition</code> vector to use in the sky shader:</p>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;sun-position-setter&#39;, {\n  init: function () {\n    var skyEl = this.el;\n    var orbitEl = this.el.sceneEl.querySelector(&#39;#orbit&#39;);\n\n    orbitEl.addEventListener(&#39;componentchanged&#39;, function changeSun (evt) {\n      var sunPosition;\n      var phi;\n      var theta;\n\n      if (evt.detail.name !== &#39;rotation&#39;) { return; }\n\n      sunPosition = orbitEl.getAttribute(&#39;rotation&#39;);\n\n      if(sunPosition === null) { return; }\n\n      theta = Math.PI * (- 0.5);\n      phi = 2 * Math.PI * (sunPosition.y / 360 - 0.5);\n      skyEl.setAttribute(&#39;material&#39;, &#39;sunPosition&#39;, {\n        x: Math.cos(phi),\n        y: Math.sin(phi) * Math.sin(theta),\n        z: -1\n      });\n    });\n  }\n});</code></pre>\n<p>In addition, there are components developed by the A-Frame developer community\nthat allow the use of existing shaders from repositories such as\n<a href=\"https://shadertoy.com\">ShaderToy</a> and <a href=\"https://github.com/chenzlabs/aframe-import-shaderfrog\">ShaderFrog</a>.</p>\n<p>Note however that these shaders can be quite demanding in terms of\ncomputational and graphics power, and some more complex shaders may not\nfunction well on lower-performance devices such as smartphones.</p>\n<h2 id=\"creating-a-material-from-a-component\">Creating a Material from a Component</h2>\n<p>For those cases where the <code>registerShader</code> API lacks needed functionality\n(e.g., no <code>tick</code> handler, some missing uniform types), we recommend creating a\ncustom material by creating three.js materials (e.g., <code>RawShaderMaterial</code>,\n<code>ShaderMaterial</code>) within a component:</p>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;custom-material&#39;, {\n  schema: {\n    // Add properties.\n  },\n\n  init: function () {\n    this.material = this.el.getOrCreateObject3D(&#39;mesh&#39;).material = new THREE.ShaderMaterial({\n      // ...\n    });\n  },\n\n  update: function () {\n    // Update `this.material`.\n  }\n});</code></pre>\n",
      "title": "material",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/material.js",
      "examples": [
        {
          "title": "Displacement Shader",
          "src": "https://glitch.com/edit/#!/aframe-displacement-shader?path=client/index.js:1:0"
        },
        {
          "title": "Shader Walkthrough",
          "src": "https://codepen.io/machenmusik/pen/WZyQNj"
        },
        {
          "title": "Grid Shader",
          "src": "https://glitch.com/edit/#!/aframe-simpler-shader?path=public/index.html"
        },
        {
          "title": "Real-Time Vertex Displacement Shader",
          "src": "https://glitch.com/edit/#!/aframe-displacement-registershader?path=public/index.html"
        },
        {
          "title": "Real-Time Vertex Displacement with Offset",
          "src": "https://glitch.com/edit/#!/aframe-displacement-offset-registershader?path=public/index.html"
        }
      ],
      "excerpt": "<p>The material component gives appearance to an entity. We can define properties\nsuch as color, opacity, or texture. This is often paired with the <a href=\"./geometry.md\">geometry\ncomponent</a> which provides shape.</p>"
    },
    {
      "id": "oculus-touch-controls",
      "contents": "<p>The oculus-touch-controls component interfaces with the Oculus Touch controllers. It\nwraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Touch controller model.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity oculus-touch-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity oculus-touch-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hand</td>\n<td>The hand that will be tracked (i.e., right, left).</td>\n<td>left</td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the Touch controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>triggerdown</td>\n<td>Trigger pressed.</td>\n</tr>\n<tr>\n<td>triggerup</td>\n<td>Trigger released.</td>\n</tr>\n<tr>\n<td>triggertouchstart</td>\n<td>Trigger touched.</td>\n</tr>\n<tr>\n<td>triggertouchend</td>\n<td>Trigger no longer touched.</td>\n</tr>\n<tr>\n<td>triggerchanged</td>\n<td>Trigger changed.</td>\n</tr>\n<tr>\n<td>thumbstickdown</td>\n<td>Thumbstick pressed.</td>\n</tr>\n<tr>\n<td>thumbstickup</td>\n<td>Thumbstick released.</td>\n</tr>\n<tr>\n<td>thumbsticktouchstart</td>\n<td>Thumbstick touched.</td>\n</tr>\n<tr>\n<td>thumbsticktouchend</td>\n<td>Thumbstick no longer touched.</td>\n</tr>\n<tr>\n<td>thumbstickchanged</td>\n<td>Thumbstick changed.</td>\n</tr>\n<tr>\n<td>gripdown</td>\n<td>Grip button pressed.</td>\n</tr>\n<tr>\n<td>gripup</td>\n<td>Grip button released.</td>\n</tr>\n<tr>\n<td>griptouchstart</td>\n<td>Grip button touched.</td>\n</tr>\n<tr>\n<td>griptouchend</td>\n<td>Grip button no longer touched.</td>\n</tr>\n<tr>\n<td>gripchanged</td>\n<td>Grip button changed.</td>\n</tr>\n<tr>\n<td>abuttondown</td>\n<td>A button pressed.</td>\n</tr>\n<tr>\n<td>abuttonup</td>\n<td>A button released.</td>\n</tr>\n<tr>\n<td>abuttontouchstart</td>\n<td>A button touched.</td>\n</tr>\n<tr>\n<td>abuttontouchend</td>\n<td>A button no longer touched.</td>\n</tr>\n<tr>\n<td>abuttonchanged</td>\n<td>A button changed.</td>\n</tr>\n<tr>\n<td>bbuttondown</td>\n<td>B button pressed.</td>\n</tr>\n<tr>\n<td>bbuttonup</td>\n<td>B button released.</td>\n</tr>\n<tr>\n<td>bbuttontouchstart</td>\n<td>B button touched.</td>\n</tr>\n<tr>\n<td>bbuttontouchend</td>\n<td>B button no longer touched.</td>\n</tr>\n<tr>\n<td>bbuttonchanged</td>\n<td>B button changed.</td>\n</tr>\n<tr>\n<td>xbuttondown</td>\n<td>X button pressed.</td>\n</tr>\n<tr>\n<td>xbuttonup</td>\n<td>X button released.</td>\n</tr>\n<tr>\n<td>xbuttontouchstart</td>\n<td>X button touched.</td>\n</tr>\n<tr>\n<td>xbuttontouchend</td>\n<td>X button no longer touched.</td>\n</tr>\n<tr>\n<td>xbuttonchanged</td>\n<td>X button changed.</td>\n</tr>\n<tr>\n<td>ybuttondown</td>\n<td>Y button pressed.</td>\n</tr>\n<tr>\n<td>ybuttonup</td>\n<td>Y button released.</td>\n</tr>\n<tr>\n<td>ybuttontouchstart</td>\n<td>Y button touched.</td>\n</tr>\n<tr>\n<td>ybuttontouchend</td>\n<td>Y button no longer touched.</td>\n</tr>\n<tr>\n<td>ybuttonchanged</td>\n<td>Y button changed.</td>\n</tr>\n<tr>\n<td>surfacedown</td>\n<td>Surface button pressed.</td>\n</tr>\n<tr>\n<td>surfaceup</td>\n<td>Surface button released.</td>\n</tr>\n<tr>\n<td>surfacetouchstart</td>\n<td>Surface button touched.</td>\n</tr>\n<tr>\n<td>surfacetouchend</td>\n<td>Surface button no longer touched.</td>\n</tr>\n<tr>\n<td>surfacechanged</td>\n<td>Surface button changed.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><a href=\"https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-left.obj\">Left Controller OBJ</a></li>\n<li><a href=\"https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-left.mtl\">Left Controller MTL</a></li>\n<li><a href=\"https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-right.obj\">Right Controller OBJ</a></li>\n<li><a href=\"https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-right.mtl\">Right Controller MTL</a></li>\n</ul>\n",
      "title": "oculus-touch-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/oculus-touch-controls.js",
      "examples": [],
      "excerpt": "<p>The oculus-touch-controls component interfaces with the Oculus Touch controllers. It\nwraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Touch controller model.</p>"
    },
    {
      "id": "oculus-go-controls",
      "contents": "<p>The oculus-go-controls component interfaces with the Oculus Go controllers.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and an Oculus Go controller model that highlights the touched\nand/or pressed buttons (trackpad, trigger).</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;!-- Match Oculus Go controller if present, regardless of hand. --&gt;\n&lt;a-entity oculus-go-controls&gt;&lt;/a-entity&gt;\n\n&lt;!-- Match Oculus Go controller if present and for specified hand. --&gt;\n&lt;a-entity oculus-go-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity oculus-go-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>armModel</td>\n<td>Whether the arm model is used for positional data.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>buttonColor</td>\n<td>Button colors when not pressed.</td>\n<td>#000000</td>\n</tr>\n<tr>\n<td>buttonTouchedColor</td>\n<td>Button colors when touched.</td>\n<td>#777777</td>\n</tr>\n<tr>\n<td>buttonHighlightColor</td>\n<td>Button colors when pressed and active.</td>\n<td>#FFFFFF</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>The hand that will be tracked (e.g., right, left).</td>\n<td></td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the Oculus Go controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trackpadchanged</td>\n<td>Trackpad changed.</td>\n</tr>\n<tr>\n<td>trackpaddown</td>\n<td>Trackpad pressed.</td>\n</tr>\n<tr>\n<td>trackpadup</td>\n<td>Trackpad released.</td>\n</tr>\n<tr>\n<td>trackpadtouchstart</td>\n<td>Trackpad touched.</td>\n</tr>\n<tr>\n<td>trackpadtouchend</td>\n<td>Trackpad not touched.</td>\n</tr>\n<tr>\n<td>trackpadmoved</td>\n<td>Trackpad moved.</td>\n</tr>\n<tr>\n<td>triggerchanged</td>\n<td>Trigger changed.</td>\n</tr>\n<tr>\n<td>triggerdown</td>\n<td>Trigger pressed.</td>\n</tr>\n<tr>\n<td>triggerup</td>\n<td>Trigger released.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><a href=\"https://cdn.aframe.io/controllers/oculus/go/oculus-go-controller.gltf\">Controller GLTF</a></li>\n</ul>\n",
      "title": "oculus-go-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/oculus-go-controls.js",
      "examples": [],
      "excerpt": "<p>The oculus-go-controls component interfaces with the Oculus Go controllers.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and an Oculus Go controller model that highlights the touched\nand/or pressed buttons (trackpad, trigger).</p>"
    },
    {
      "id": "position",
      "contents": "<p>The position component places entities at certain spots in 3D space. Position\ntakes a coordinate value as three space-delimited numbers.</p>\n<p>All entities inherently have the position component.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity position=&quot;0 1 -1&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<p>A-Frame uses a right-handed coordinate system where the negative Z axis extends into the screen. The table below assumes looking down the negative Z axis from the origin.</p>\n<table>\n<thead>\n<tr>\n<th>Axis</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x</td>\n<td>Negative X axis extends left. Positive X Axis extends right.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Negative Y axis extends down. Positive Y Axis extends up.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Negative Z axis extends in. Positive Z Axis extends out.</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<h2 id=\"relative-positioning\">Relative Positioning</h2>\n<p>World-space positions of child entities inherit from parent entities. Consider this scene:</p>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;parent&quot; position=&quot;1 2 3&quot;&gt;\n  &lt;a-entity id=&quot;child1&quot;&gt;&lt;/a-entity&gt;\n  &lt;a-entity id=&quot;child2&quot; position=&quot;2 3 4&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-entity&gt;</code></pre>\n<p>The world-space position of <code>#child1</code> would be <code>1 2 3</code> as inherited by the\nentity. In the local parent&#39;s space, <code>#child1</code>&#39;s position would be <code>0 0 0</code>.</p>\n<p>The world-space position of <code>#child2</code> would be <code>3 5 7</code>, by combining the\nposition with the parent entity. In the parent&#39;s local space, <code>#child2</code>&#39;s\nposition would be <code>2 3 4</code>.</p>\n<h2 id=\"updating-position\">Updating Position</h2>\n<p>For performance and ergonomics, we recommend updating position directly via the\nthree.js <a href=\"https://threejs.org/docs/#api/core/Object3D\">Object3D</a> <code>.position</code> <a href=\"https://threejs.org/docs/index.html#api/math/Vector3\">Vector3</a> versus <a href=\"../introduction/javascript-events-dom-apis.md#updating-a-component-with-setattribute\">via\n<code>.setAttribute</code></a>.</p>\n<p>This method is easier because we have access to all the <a href=\"https://threejs.org/docs/index.html#api/math/Vector3\">Vector3\nutilities</a>, and faster by skipping <code>.setAttribute</code> overhead and not\nneeding to create an object to set position:</p>\n<pre><code class=\"language-js\">// With three.js\nel.object3D.position.set(1, 2, 3);\n\n// With .setAttribute (less recommended).\nel.setAttribute(&#39;position&#39;, {x: 1, y: 2, z: 3});</code></pre>\n<p>We can also do incremental updates (which is just modifying a number) and use\n<a href=\"https://threejs.org/docs/index.html#api/math/Vector3\">Vector3</a> utilities:</p>\n<pre><code class=\"language-js\">el.object3D.position.x += 1;\nel.object3D.position.multiplyScalar(2);\nel.object3D.position.sub(someOtherVector);</code></pre>\n<h3 id=\"getting-position\">Getting Position</h3>\n<p>To reflect updates done at the three.js level, A-Frame returns the actual\n<code>Object3D.position</code> vector object when doing <code>.getAttribute(&#39;position&#39;)</code>.  Note\nmodifying the return value will modify the entity itself.</p>\n<p>See also <a href=\"./camera.md#reading-position-or-rotation-of-the-camera\">reading position and rotation of the camera</a>.</p>\n<h3 id=\"order-of-transformations\">Order of Transformations</h3>\n<p>Transformations are applied to entities in this order:</p>\n<ul>\n<li><a href=\"scale.md\">scale</a></li>\n<li><a href=\"rotation.md\">rotation</a></li>\n<li>position/translation</li>\n</ul>\n",
      "title": "position",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/position.js",
      "examples": [],
      "excerpt": "<p>The position component places entities at certain spots in 3D space. Position\ntakes a coordinate value as three space-delimited numbers.</p>"
    },
    {
      "id": "pool",
      "contents": "<p>The pool component allows for <a href=\"https://en.wikipedia.org/wiki/Object_pool_pattern\">object\npooling</a>. This gives us a\nreusable pool of entities to avoid creating and destroying the same kind of\nentities in dynamic scenes. Object pooling helps reduce garbage collection pauses.</p>\n<p>Note that entities requested from the pool are paused by default and you need \nto call <code>.play()</code> in order to activate their components&#39; tick functions.</p>\n<h2 id=\"example\">Example</h2>\n<p>For example, we may have a game with enemy entities that we want to reuse.</p>\n<pre><code class=\"language-html\">&lt;a-scene pool__enemy=&quot;mixin: enemy; size: 10&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<pre><code class=\"language-js\">var el = sceneEl.components.pool__enemy.requestEntity();\nel.play();\nsceneEl.components.pool__enemy.returnEntity(el);</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>container</td>\n<td>Selector to store pooled entities. Defaults to the scene.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>dynamic</td>\n<td>Grow the pool automatically if more entities are requested after reaching the <code>size</code>.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>mixin</td>\n<td>Mixin required to initialize the entities of the pool.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>size</td>\n<td>Number of preallocated entities in the pool.</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<h2 id=\"methods\">Methods</h2>\n<h3 id=\"requestentity-\">.requestEntity ()</h3>\n<p>Request one of the available entities in the pool. Will return <code>undefined</code> and \nlog a warning if <code>dynamic</code> is set to <code>false</code> and you have exhausted the pool.</p>\n<h3 id=\"returnentity-entityel\">.returnEntity (entityEl)</h3>\n<p>Relinquish an entity back to the pool. Will log a warning if you attempt to return\nan entity that did not belong to this pool.</p>\n",
      "title": "pool",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/pool.js",
      "examples": [],
      "excerpt": "<p>The pool component allows for <a href=\"https://en.wikipedia.org/wiki/Object_pool_pattern\">object\npooling</a>. This gives us a\nreusable pool of entities to avoid creating and destroying the same kind of\nentities in dynamic scenes. Object pooling helps reduce garbage collection pauses.</p>"
    },
    {
      "id": "raycaster",
      "contents": "<p>The raycaster component provides line-based intersection testing with a\n<a href=\"https://en.wikipedia.org/wiki/Ray_casting\">raycaster</a>. Raycasting is the method of extending a line from\nan origin towards a direction, and checking whether that line intersects with\nother entites.</p>\n<p>The raycaster component uses the <a href=\"https://threejs.org/docs/#api/core/Raycaster\">three.js raycaster</a>. The raycaster\nchecks for intersections at a certain interval against a list of objects, and\nwill emit events on the entity when it detects intersections or clearing of\nintersections (i.e., when the raycaster is no longer intersecting an entity).</p>\n<p>We prescribe that the set of objects that the raycaster tests for intersection\nis explicitly defined via the <code>objects</code> selector property described below.\nRaycasting is an expensive operation, and we should raycast against only\ntargets that need to be interactable at any given time.</p>\n<p>The <a href=\"./cursor.md\">cursor component</a> and <a href=\"./laser-controls.md\">laser-controls components</a>\nboth build on top of the raycaster component.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;player&quot; collider-check&gt;\n  &lt;a-entity raycaster=&quot;objects: .collidable&quot; position=&quot;0 -0.9 0&quot; rotation=&quot;90 0 0&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-entity&gt;\n&lt;a-entity class=&quot;collidable&quot; geometry=&quot;primitive: box&quot; position=&quot;1 0 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>Whenever an entity adds or removes the class <code>collidable</code>, the raycaster will\nrefresh its list of objects it is raycasting against.</p>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;collider-check&#39;, {\n  dependencies: [&#39;raycaster&#39;],\n\n  init: function () {\n    this.el.addEventListener(&#39;raycaster-intersection&#39;, function () {\n      console.log(&#39;Player hit something!&#39;);\n    });\n  }\n});</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoRefresh</td>\n<td>Whether to automatically refresh raycaster&#39;s list of objects to test for intersection using mutation observers to detect added or removed entities and components.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>Vector3 coordinate of which direction the ray should point from relative to the entity&#39;s origin.</td>\n<td>0, 0, -1</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>Whether raycaster is actively checking for intersections.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>far</td>\n<td>Maximum distance under which resulting entities are returned. Cannot be lower than <code>near</code>.</td>\n<td>Infinity</td>\n</tr>\n<tr>\n<td>interval</td>\n<td>Number of milliseconds to wait in between each intersection test. Lower number is better for faster updates. Higher number is better for performance. Intersection tests are performed at most once per frame.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>near</td>\n<td>Minimum distance over which resuilting entities are returned. Cannot be lower than 0.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>objects</td>\n<td>Query selector to pick which objects to test for intersection. If not specified, all entities will be tested. Note that only objects attached via <code>.setObject3D</code> and their recursive children will be tested.</td>\n<td>null</td>\n</tr>\n<tr>\n<td>origin</td>\n<td>Vector3 coordinate of where the ray should originate from relative to the entity&#39;s origin.</td>\n<td>0, 0, 0</td>\n</tr>\n<tr>\n<td>showLine</td>\n<td>Whether or not to display the raycaster visually with the <a href=\"./line.md\">line component</a>.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>useWorldCoordinates</td>\n<td>Whether the raycaster origin and direction properties are specified in world coordinates.</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<p>The raycaster component is useful because of the events it emits on entities. It will emit events on both the raycasting entity and the intersected entities.</p>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>raycaster-intersected</td>\n<td>Emitted on the intersected entity. Entity is intersecting with a raycaster. Event detail will contain <code>el</code>, the raycasting entity, and <code>intersection</code>, and <code>.getIntersection (el)</code> function which can be used to obtain current intersection data.</td>\n</tr>\n<tr>\n<td>raycaster-intersected-cleared</td>\n<td>Emitted on the intersected entity. Entity is no longer intersecting with a raycaster. Event detail will contain <code>el</code>, the raycasting entity.</td>\n</tr>\n<tr>\n<td>raycaster-intersection</td>\n<td>Emitted on the raycasting entity. Raycaster is intersecting with one or more entities. Event detail will contain <code>els</code>, an array with the intersected entities, and <code>intersections</code>, and <code>.getIntersection (el)</code> function which can be used to obtain current intersection data.</td>\n</tr>\n<tr>\n<td>raycaster-intersection-cleared</td>\n<td>Emitted on the raycasting entity. Raycaster is no longer intersecting with one or more entities. Event detail will contain <code>clearedEls</code>, an array with the formerly intersected entities.</td>\n</tr>\n</tbody></table>\n<h3 id=\"intersection-object\">Intersection Object</h3>\n<p>The event detail contains intersection objects. They are returned straight from\n<a href=\"https://threejs.org/docs/#api/core/Raycaster\">three.js <code>Raycaster.intersectObjects.</code></a>:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>distance</td>\n<td>distance between the origin of the ray and the intersection</td>\n</tr>\n<tr>\n<td>point</td>\n<td>point of intersection, in world coordinates</td>\n</tr>\n<tr>\n<td>face</td>\n<td>intersected face</td>\n</tr>\n<tr>\n<td>faceIndex</td>\n<td>index of the intersected face</td>\n</tr>\n<tr>\n<td>indices</td>\n<td>indices of vertices comprising the intersected face</td>\n</tr>\n<tr>\n<td>object</td>\n<td>the intersected object</td>\n</tr>\n<tr>\n<td>uv</td>\n<td>U,V coordinates at point of intersection</td>\n</tr>\n</tbody></table>\n<h2 id=\"members\">Members</h2>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>intersectedEls</td>\n<td>Entities currently intersecting the raycaster.</td>\n</tr>\n<tr>\n<td>objects</td>\n<td>three.js objects to test for intersections. Will be <code>scene.children</code> if <code>objects</code> property is not specified.</td>\n</tr>\n<tr>\n<td>raycaster</td>\n<td>three.js raycaster object.</td>\n</tr>\n</tbody></table>\n<h2 id=\"methods\">Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getIntersection (el)</td>\n<td>Given an entity, return current intersection data if any. This method is also passed into intersection event details for convenience.</td>\n</tr>\n<tr>\n<td>refreshObjects</td>\n<td>Refreshes the list of objects based off of the <code>objects</code> property to test for intersection.</td>\n</tr>\n</tbody></table>\n<h2 id=\"selecting-entities-to-test-for-intersection\">Selecting Entities to Test for Intersection</h2>\n<p>Raycasting is a relatively expensive operation. We heavily recommend and\nprescribe setting the <code>objects</code> property which will filter what entities the\nraycaster is listening to for intersections.  Selective intersections are good\nfor performance to limit the number of entities to test for intersection since\n  intersection testing is an operation that many times per second.</p>\n<p>To select or pick the entities we want to test for intersection, we can use the\n<code>objects</code> property. If this property is not defined, then the raycaster will\ntest every object in the scene for intersection. <code>objects</code> takes a query\nselector value:</p>\n<pre><code class=\"language-html\">&lt;a-entity raycaster=&quot;objects: .clickable&quot; cursor&gt;&lt;/a-entity&gt;\n&lt;a-entity class=&quot;clickable&quot; geometry=&quot;primitive: box&quot; position=&quot;1 0 0&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity class=&quot;not-clickable&quot; geometry=&quot;primitive: sphere&quot; position=&quot;-1 0 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>In that example, we can remove or add entities to the raycast list by setting\nor removing the <code>clickable</code> class (<code>el.classList.toggle(&#39;clickable&#39;)</code>). Another\ngood way to filter is using data attributes instead of classes\n(<code>[data-raycastable]</code> and <code>el.setAttribute(&#39;data-raycastable&#39;, &#39;&#39;)</code>).</p>\n<h2 id=\"listening-for-raycaster-intersection-data-change\">Listening for Raycaster Intersection Data Change</h2>\n<p>When we want to listen for change to the intersection data (e.g., listen to\nchange of the actual point of intersection), we can use the <code>.getIntersection\n(el)</code> method, which takes an entity and returns intersection data if the\nraycaster is currently intersecting the entity. Below is an example component\nof doing so in the tick handler:</p>\n<pre><code class=\"language-js\">AFRAME.registerComponent(&#39;raycaster-listen&#39;, {\n    init: function () {\n    // Use events to figure out what raycaster is listening so we don&#39;t have to\n    // hardcode the raycaster.\n    this.el.addEventListener(&#39;raycaster-intersected&#39;, evt =&gt; {\n      this.raycaster = evt.detail.el;\n    });\n    this.el.addEventListener(&#39;raycaster-intersected-cleared&#39;, evt =&gt; {\n      this.raycaster = null;\n    });\n  },\n\n  tick: function () {\n    if (!this.raycaster) { return; }  // Not intersecting.\n\n    let intersection = this.raycaster.components.raycaster.getIntersection(this.el);\n    if (!intersection) { return; }\n    console.log(intersection.point);\n  }\n});\n\n// &lt;a-entity id=&quot;raycaster&quot; raycaster&gt;&lt;/a-entity&gt;\n// &lt;a-entity geometry material raycaster-listen&gt;&lt;/a-entity&gt;</code></pre>\n<p>Now on every frame, the entity will check its intersection data and do\nsomething with it (e.g., draw a sphere at the point of intersection).</p>\n<h2 id=\"manually-refreshing-the-target-entities-of-the-raycaster\">Manually Refreshing the Target Entities of the Raycaster</h2>\n<p>The raycaster component keeps a local array of objects and entities that the\nraycaster tests against for intersection. This array defaults to every 3D\nobject in the three.js Scene. If the <code>objects</code> property is specified, then\nbuilding this array requires running query selectors and additional filtering.</p>\n<p>By default with <code>autoRefresh</code> set to <code>true</code>, the raycaster component will\nautomatically refresh this list when it detects entities or components are\nadded and removed. While it is more friendly to auto-refresh, more advanced\ndevelopers may want to disable <code>autoRefresh</code> and control when the raycaster\nis refreshed for performance.</p>\n<p>To manually refresh the list of objects that the raycaster component tests\nagainst, call the <code>.refreshObjects()</code> method:</p>\n<pre><code class=\"language-js\">var raycasterEl = AFRAME.scenes[0].querySelector(&#39;[raycaster]&#39;);\nraycasterEl.components.raycaster.refreshObjects();</code></pre>\n<p>A-Frame will call <code>.refreshObjects()</code> automatically when an entity is appended\nor detached from the scene, but it will not get called during normal DOM\nmutations (e.g., some entity changes its <code>class</code>).</p>\n<h2 id=\"customizing-the-line\">Customizing the Line</h2>\n<p>If <code>showLine</code> is set to <code>true</code>, the raycaster will configure the line given the\nraycaster&#39;s <code>origin</code>, <code>direction</code>, and <code>far</code> properties. To customize the line\nappearance provided by the <code>showLine: true</code> property, we configure the <a href=\"./line.md\">line\ncomponent</a>:</p>\n<pre><code class=\"language-html\">&lt;a-entity raycaster=&quot;showLine: true; far: 100&quot; line=&quot;color: orange; opacity: 0.5&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>The line length is the raycaster&#39;s <code>far</code> property when the raycaster is not\nintersecting any entity. By default, the <code>far</code> property defaults to 1000 meters\nmeaning the line drawn will be 1000 meters long. When the raycaster intersects\nan object, the line will get truncated to the intersection point so it doesn&#39;t\nshoot straight through.</p>\n",
      "title": "raycaster",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/raycaster.js",
      "examples": [],
      "excerpt": "<p>The raycaster component provides line-based intersection testing with a\n<a href=\"https://en.wikipedia.org/wiki/Ray_casting\">raycaster</a>. Raycasting is the method of extending a line from\nan origin towards a direction, and checking whether that line intersects with\nother entites.</p>"
    },
    {
      "id": "renderer",
      "contents": "<p>The <code>renderer</code> system configures a scene&#39;s\n<a href=\"https://threejs.org/docs/#api/renderers/WebGLRenderer\">THREE.WebGLRenderer</a> instance.\nIt also configures presentation attributes when entering WebVR/WebXR.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene renderer=&quot;antialias: true;\n                   colorManagement: true;\n                   sortObjects: true;\n                   physicallyCorrectLights: true;\n                   maxCanvasWidth: 1920;\n                   maxCanvasHeight: 1920;&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>antialias</td>\n<td>Whether to perform antialiasing. If <code>auto</code>, antialiasing is disabled on mobile.</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>colorManagement</td>\n<td>Whether to use a color-managed linear workflow.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>highRefreshRate</td>\n<td>Toggles 72hz mode on Oculus Browser. Defaults to 60hz.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>foveationLevel</td>\n<td>Enables foveation in VR to improve perf. 0 none, 1 low, 2 medium, 3 high</td>\n<td>0</td>\n</tr>\n<tr>\n<td>sortObjects</td>\n<td>Whether to sort objects before rendering.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>physicallyCorrectLights</td>\n<td>Whether to use physically-correct light attenuation.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>maxCanvasWidth</td>\n<td>Maximum canvas width. Uses the size multiplied by device pixel ratio. Does not limit canvas width if set to -1.</td>\n<td>1920</td>\n</tr>\n<tr>\n<td>maxCanvasHeight</td>\n<td>Maximum canvas height. Behaves the same as maxCanvasWidth.</td>\n<td>1920</td>\n</tr>\n<tr>\n<td>logarithmicDepthBuffer</td>\n<td>Whether to use a logarithmic depth buffer.</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>precision</td>\n<td>Fragment shader <a href=\"#precision\">precision</a> : low, medium or high.</td>\n<td>high</td>\n</tr>\n<tr>\n<td>alpha</td>\n<td>Whether the canvas should contain an alpha buffer.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>NOTE:</strong> Once the scene is initialized, these properties may no longer be changed.</p>\n</blockquote>\n<h3 id=\"antialias\">antialias</h3>\n<p>When enabled, smooths jagged edges on curved lines and diagonals at moderate performance cost.\nBy default, antialiasing is disabled on mobile devices.</p>\n<h3 id=\"colormanagement\">colorManagement</h3>\n<p>Color management provides more accurate rendering and reduces the likelihood that scenes\nwill appear overlit or &quot;washed out.&quot; Enabling color management is recommended for precisely\nmatching colors from texturing and modeling tools, but unofficial components may not always\nrespond to color management properly at this time.</p>\n<p>Managed and unmanaged color modes are similar to linear and gamma workflows, respectively, in\nother engines and tools.</p>\n<blockquote>\n<p><strong>NOTE:</strong> In three.js, and previous versions of A-Frame, a <code>gammaOutput: true</code> property was\navailable. This is applied automatically when color management is enabled.</p>\n</blockquote>\n<h3 id=\"highrefreshrate\">highRefreshRate</h3>\n<p>Toggles on the highest refresh rate for the given device. Currently this is supported on the Oculus\nBrowser in Oculus Go and switches rendering from 60hz to 72hz.</p>\n<h3 id=\"foveationlevel\">foveationLevel</h3>\n<p>Sets the level of requested foveation which renders fewer pixels around the edges of the viewport\nwhen in stereo rendering mode on certain systems. This is currently supported by the Oculus Browser\non the Oculus Go with values ranging from 0 (none) to 3 (high). </p>\n<h3 id=\"sortobjects\">sortObjects</h3>\n<p>Sorting is used to attempt to properly render objects that have some degree of transparency.\nDue to various limitations, proper transparency often requires some amount of careful setup.\nBy default, objects are not sorted, and the order of elements in the DOM determines order of\nrendering. Re-ordering DOM elements provides one way of forcing a consistent behavior, whereas\nuse of <code>renderer=&quot;sortObjects: true&quot;</code> may cause unwanted changes as the camera moves.</p>\n<h3 id=\"physicallycorrectlights\">physicallyCorrectLights</h3>\n<p>By default, point and spot lights attenuate (or, appear dimmer as they become farther away)\naccording to a model that is classically common, but physically inaccurate. For more realistic\nlight attenuation, set <code>renderer=&quot;physicallyCorrectLights: true&quot;</code>. Light intensities may need to\nbe adjusted when making this change. Performance is not significantly affected in either mode.</p>\n<blockquote>\n<p><strong>NOTE:</strong> When glTF models contain lights, use the physically-correct lighting mode to match\nthe results in the original modeling tool.</p>\n</blockquote>\n<h3 id=\"logarithmicdepthbuffer\">logarithmicDepthBuffer</h3>\n<p>A logarithmic depth buffer may provide better sorting and rendering in scenes containing very\nlarge differences of scale and distance.</p>\n<h3 id=\"precision\">Precision</h3>\n<p>Set precision in fragment shaders. Main use is to address issues in older hardware / drivers. Adreno 300 series GPU based phones are <a href=\"https://github.com/mrdoob/three.js/issues/14137\">particularly problematic</a>. You can set to <code>mediump</code> as a workaround. It will improve performance, in mobile in particular but be aware that might cause visual artifacts in shaders / textures.</p>\n<h3 id=\"alpha\">alpha</h3>\n<p>Whether the canvas should contain an alpha buffer. If this is true the renderer will have a transparent backbuffer and the canvas can be composited with the rest of the webpage. <a href=\"https://webglfundamentals.org/webgl/lessons/webgl-and-alpha.html\">See here for more info.</a></p>\n",
      "title": "renderer",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/systems/renderer.js",
      "examples": [],
      "excerpt": "<p>The <code>renderer</code> system configures a scene&apos;s\n<a href=\"https://threejs.org/docs/#api/renderers/WebGLRenderer\">THREE.WebGLRenderer</a> instance.\nIt also configures presentation attributes when entering WebVR/WebXR.</p>"
    },
    {
      "id": "rotation",
      "contents": "<p>The rotation component defines the orientation of an entity in degrees. It\ntakes the pitch (<code>x</code>), yaw (<code>y</code>), and roll (<code>z</code>) as three space-delimited\nnumbers indicating degrees of rotation.</p>\n<p>All entities inherently have the rotation component.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity rotation=&quot;45 90 180&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<p>A-Frame uses a right-handed coordinate system. When aligning our right hand&#39;s\nthumb with a positive axis, our hand will curl in the positive direction of\nrotation.</p>\n<table>\n<thead>\n<tr>\n<th>Axis</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x</td>\n<td>Pitch, rotation about the X-axis.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Yaw, rotation about the Y-axis.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Roll, rotation about the Z-axis.</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<h2 id=\"relative-rotation\">Relative Rotation</h2>\n<p>Child entities inherit from world-space rotations from parent entities.\nConsider this scene:</p>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;parent&quot; rotation=&quot;0 45 0&quot;&gt;\n  &lt;a-entity id=&quot;child1&quot;&gt;&lt;/a-entity&gt;\n  &lt;a-entity id=&quot;child2&quot; rotation=&quot;15 45 30&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-entity&gt;</code></pre>\n<p>The world-space rotation of <code>#child1</code> would be <code>0 45 0</code> as inherited by the\nentity. In the local parent&#39;s space, <code>#child1</code>&#39;s rotation would be <code>0 0 0</code>.</p>\n<p>The world-space rotation of <code>#child2</code> would be <code>15 90 30</code>, by combining the\nrotation with the parent entity. In the parent&#39;s local space, <code>#child2</code>&#39;s\nrotation would be <code>15 45 30</code>.</p>\n<h2 id=\"updating-rotation\">Updating Rotation</h2>\n<p>For performance and ergonomics, we recommend updating rotation directly via the\nthree.js <a href=\"https://threejs.org/docs/#api/core/Object3D\">Object3D</a> <code>.rotation</code> <a href=\"https://threejs.org/docs/index.html#api/math/Euler\">Euler</a> (in radians) versus\n<a href=\"../introduction/javascript-events-dom-apis.md#updating-a-component-with-setattribute\">via <code>.setAttribute</code></a>.</p>\n<p>This method is easier because we have access to all the <a href=\"https://threejs.org/docs/index.html#api/math/Euler\">Euler\nutilities</a>, and faster by skipping <code>.setAttribute</code> overhead and not\nneeding to create an object to set rotation:</p>\n<pre><code class=\"language-js\">// With three.js\nel.object3D.rotation.set(\n  THREE.Math.degToRad(15),\n  THREE.Math.degToRad(30),\n  THREE.Math.degToRad(90)\n);\nel.object3D.rotation.x += Math.PI;\n\n// With .setAttribute (less recommended).\nel.setAttribute(&#39;rotation&#39;, {x: 15, y: 30, z: 90});</code></pre>\n<h3 id=\"getting-rotation\">Getting Rotation</h3>\n<p>Updates at the three.js level will still be reflected in A-Frame when doing\n<code>entityEl.getAttribute(&#39;rotation&#39;);</code>. When calling <code>.getAttribute(&#39;rotation&#39;)</code>,\nA-Frame will convert from radians and degrees and return a normal JavaScript\nobject with x/y/z properties.</p>\n<p>See also <a href=\"./camera.md#reading-position-or-rotation-of-the-camera\">reading position and rotation of the camera</a>.</p>\n<h3 id=\"order-of-transformations\">Order of Transformations</h3>\n<p>Transformations are applied to entities in this order:</p>\n<ul>\n<li><a href=\"scale.md\">scale</a></li>\n<li>rotation</li>\n<li><a href=\"position.md\">position/translation</a></li>\n</ul>\n",
      "title": "rotation",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/rotation.js",
      "examples": [],
      "excerpt": "<p>The rotation component defines the orientation of an entity in degrees. It\ntakes the pitch (<code>x</code>), yaw (<code>y</code>), and roll (<code>z</code>) as three space-delimited\nnumbers indicating degrees of rotation.</p>"
    },
    {
      "id": "scale",
      "contents": "<p>The scale component defines a shrinking, stretching, or skewing transformation\nof an entity. It takes three scaling factors for the X, Y, and Z axes.</p>\n<p>All entities inherently have the scale component.</p>\n<h2 id=\"example\">Example</h2>\n<p>The example below shrinks the entity in half along the X direction, maintains\nthe same scale factor along the Y direction, and stretches the entity by\ntwo-fold along the Z-direction:</p>\n<pre><code class=\"language-html\">&lt;a-entity scale=&quot;0.5 1 2&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<p>If we set any of the scaling factors to 0, then A-Frame will assign instead a\nnegligible value.</p>\n<table>\n<thead>\n<tr>\n<th>Axis</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x</td>\n<td>Scaling factor in the X direction.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Scaling factor in the Y direction.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Scaling factor in the Z direction.</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h2 id=\"reflection\">Reflection</h2>\n<p>Scaling factors can be negative, which results in a reflection.</p>\n<p>A notable use for this is for sky spheres. Sky spheres contain the entire scene\nand have a texture mapped on the interior surface. To do this, we can reflect,\nor invert, the sphere in the Z-direction.</p>\n<pre><code class=\"language-html\">&lt;a-entity geometry=&quot;primitive: sphere; radius: 1000&quot;\n          material=&quot;src: sky.png&quot;\n          scale=&quot;1 1 -1&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"relative-scale\">Relative Scale</h2>\n<p>Similar to the rotation and position components, scales are applied in the\nlocal coordinate system and multiply in nested entities.</p>\n<h2 id=\"updating-scale\">Updating Scale</h2>\n<p>For performance and ergonomics, we recommend updating scale directly via the\nthree.js <a href=\"https://threejs.org/docs/#api/core/Object3D\">Object3D</a> <code>.scale</code> <a href=\"https://threejs.org/docs/index.html#api/math/Vector3\">Vector3</a> versus <a href=\"../introduction/javascript-events-dom-apis.md#updating-a-component-with-setattribute\">via\n<code>.setAttribute</code></a>.</p>\n<p>This method is easier because we have access to all the <a href=\"https://threejs.org/docs/index.html#api/math/Vector3\">Vector3\nutilities</a>, and faster by skipping <code>.setAttribute</code> overhead and not\nneeding to create an object to set rotation:</p>\n<pre><code class=\"language-js\">// With three.js\nel.object3D.scale.set(1, 2, 3);\n\n// With .setAttribute (not recommended).\nel.setAttribute(&#39;scale&#39;, {x: 1, y: 2, z: 3});</code></pre>\n<p>Also easier to do incremental updates:</p>\n<pre><code class=\"language-js\">el.object3D.scale.x += 1;\nel.object3D.scale.multiplyScalar(2);\nel.object3D.scale.sub(someOtherVector);</code></pre>\n<h3 id=\"getting-scale\">Getting Scale</h3>\n<p>To reflect updates done at the three.js level, A-Frame returns the actual\n<code>Object3D.scale</code> vector object when doing <code>.getAttribute(&#39;scale&#39;)</code>. Note\nmodifying the return value will modify the entity itself.</p>\n<h3 id=\"order-of-transformations\">Order of Transformations</h3>\n<p>Transformations are applied to entities in this order:</p>\n<ul>\n<li>scale</li>\n<li><a href=\"rotation.md\">rotation</a></li>\n<li><a href=\"position.md\">position/translation</a></li>\n</ul>\n",
      "title": "scale",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scale.js",
      "examples": [],
      "excerpt": "<p>The scale component defines a shrinking, stretching, or skewing transformation\nof an entity. It takes three scaling factors for the X, Y, and Z axes.</p>"
    },
    {
      "id": "screenshot",
      "contents": "<p>The screenshot component lets us take different types of screenshots with\nkeyboard shortcuts. A-Frame attaches this component to the scene by default so\nwe don&#39;t have to do anything to use the component.</p>\n<h2 id=\"shortcuts\">Shortcuts</h2>\n<h3 id=\"equirectangular-screenshot\">Equirectangular Screenshot</h3>\n<p>To take a 360&deg; (equirectangular) screenshot, press <code>&lt;ctrl&gt; + &lt;alt&gt; + &lt;shift&gt; + s</code>\non the keyboard.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/674727/22461640/ea408ea4-e75e-11e6-9f8e-7566c4542587.png\" alt=\"Equirectangular Screenshot\"></p>\n<h3 id=\"perspective-screenshot\">Perspective Screenshot</h3>\n<p>To take a normal (perspective) screenshot, press <code>&lt;ctrl&gt; + &lt;alt&gt; + s</code> on the\nkeyboard.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/674727/22461641/ea43c218-e75e-11e6-8c5e-84c0bd2d691b.png\" alt=\"Perspective Screenshot\"></p>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>The width in pixels of the screenshot taken.</td>\n<td>4096</td>\n</tr>\n<tr>\n<td>height</td>\n<td>The height in pixels of the screenshot taken.</td>\n<td>2048</td>\n</tr>\n</tbody></table>\n<h2 id=\"methods\">Methods</h2>\n<p>To take a screenshot programatically and get a canvas, call <code>getCanvas()</code>:</p>\n<pre><code class=\"language-js\">// `screenshot.projection` property can be `equirectangular` or `perspective`.\ndocument.querySelector(&#39;a-scene&#39;).components.screenshot.getCanvas(&#39;equirectangular&#39;);</code></pre>\n<p>To take a screenshot programmatically and automatically save the file, call <code>capture()</code>:</p>\n<pre><code class=\"language-js\">document.querySelector(&#39;a-scene&#39;).components.screenshot.capture(&#39;perspective&#39;)</code></pre>\n",
      "title": "screenshot",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/screenshot.js",
      "examples": [],
      "excerpt": "<p>The screenshot component lets us take different types of screenshots with\nkeyboard shortcuts. A-Frame attaches this component to the scene by default so\nwe don&apos;t have to do anything to use the component.</p>"
    },
    {
      "id": "shadow",
      "contents": "<p>The shadow component enables shadows for an entity and its children. Receiving\nshadows from surrounding objects and casting shadows onto other objects may\n(and often should) be enabled independently.</p>\n<p>Without this component, an entity will not cast nor receive shadows.</p>\n<h2 id=\"example\">Example</h2>\n<p>The example below configures a tree model to cast shadows onto the surrounding\nscene but not receive shadows itself.</p>\n<pre><code class=\"language-html\">&lt;a-entity light=&quot;type:directional; castShadow:true;&quot; position=&quot;1 1 1&quot;&gt;&lt;/a-entity&gt;\n&lt;a-gltf-model src=&quot;tree.gltf&quot; shadow=&quot;receive: false&quot;&gt;&lt;/a-gltf-model&gt;</code></pre>\n<p><strong>IMPORTANT:</strong> Adding the <code>shadow</code> component alone is not enough to display\nshadows in your scene. We must have at least one light with <code>castShadow:\ntrue</code> enabled.  Additionally, the light&#39;s shadow camera (used for depth\nprojection) usually must be configured correctly. Refer to the <a href=\"./light.md#configuring-shadows\">light</a>\ncomponent for more information.</p>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cast</td>\n<td>Whether the entity casts shadows onto the surrounding scene.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>receive</td>\n<td>Whether the entity receives shadows from the surrounding scene.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h2 id=\"scene-properties\">Scene Properties</h2>\n<p>The shadow system exposes scene-level properties for configuring the renderer\nfor shadows. These are set on <code>&lt;a-scene&gt;</code> (e.g., <code>&lt;a-scene shadow=&quot;autoUpdate:\n  false&quot;&gt;</code>).</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enabled</td>\n<td>Whether to disable shadows globally, even if there is a shadow component and a light with <code>castShadow: true</code> enabled.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>autoUpdate</td>\n<td>Whether to dynamically update the shadow map every frame. Disable and manually update by setting <code>renderer.shadowMap.needsUpdate = true</code> for best performance. Calculating shadow maps is expensive.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>type</td>\n<td>Shadow type. One of <code>pcf</code>, <code>basic</code>, <code>pcfsoft</code>.</td>\n<td><code>pcf</code> (percentage closer filtering)</td>\n</tr>\n</tbody></table>\n",
      "title": "shadow",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/shadow.js",
      "examples": [],
      "excerpt": "<p>The shadow component enables shadows for an entity and its children. Receiving\nshadows from surrounding objects and casting shadows onto other objects may\n(and often should) be enabled independently.</p>"
    },
    {
      "id": "sound",
      "contents": "<p>The sound component defines the entity as a source of sound or audio. The sound\ncomponent is positional and is thus affected by the\n<a href=\"./position.md\">components-position</a>.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Playing sound on iOS — in any browser — requires a physical user interaction.\nThis is a browser limitation, and internal A-Frame events (like fusing cursors) do\nnot count as interaction. Ways to deal with this include using a <em>Begin Experience</em>\nbutton to start ambient music, or creating audio sprites with libraries like\n<a href=\"https://github.com/goldfire/howler.js\">Howler.js</a>.</p>\n</blockquote>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity id=&quot;river&quot; geometry=&quot;primitive: plane&quot; material=&quot;color: blue&quot;\n          position=&quot;-10 0 0&quot; sound=&quot;src: url(river.mp3); autoplay: true&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>Whether to automatically play sound once set.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>distanceModel</td>\n<td><code>linear</code>, <code>inverse</code>, or <code>exponential</code></td>\n<td>inverse</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>Whether to loop the sound once the sound finishes playing.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>maxDistance</td>\n<td>Maximum distance between the audio source and the listener, after which the volume is not reduced any further.</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>on</td>\n<td>An event for the entity to listen to before playing sound.</td>\n<td>null</td>\n</tr>\n<tr>\n<td>poolSize</td>\n<td>Numbers of simultaneous instances of this sound that can be playing at the same time</td>\n<td>1</td>\n</tr>\n<tr>\n<td>positional</td>\n<td>Whether or not the audio is positional (movable).</td>\n<td>true</td>\n</tr>\n<tr>\n<td>refDistance</td>\n<td>Reference distance for reducing volume as the audio source moves further from the listener.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>rolloffFactor</td>\n<td>Describes how quickly the volume is reduced as the source moves away from the listener.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>src</td>\n<td>Selector to an asset <code>&lt;audio&gt;</code>or <code>url()</code>-enclosed path to sound file.</td>\n<td>null</td>\n</tr>\n<tr>\n<td>volume</td>\n<td>How loud to play the sound.</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h2 id=\"methods\">Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pauseSound</td>\n<td>Pause sound.</td>\n</tr>\n<tr>\n<td>playSound</td>\n<td>Play sound.</td>\n</tr>\n<tr>\n<td>stopSound</td>\n<td>Stop sound.</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sound-loaded</td>\n<td>Triggered when sound file is loaded. Event detail will contain the sound&#39;s <code>name</code> and <code>id</code>.</td>\n</tr>\n<tr>\n<td>sound-ended</td>\n<td>Triggered when sound finishes playing.  Event detail will contain the sound&#39;s <code>name</code> and <code>id</code>.</td>\n</tr>\n</tbody></table>\n<h2 id=\"playing-on-an-event\">Playing on an Event</h2>\n<p>The <code>sound</code> component can also listen to an event before playing as well. For\nexample, we might have a laughing sound play every time we click a monster:</p>\n<pre><code class=\"language-html\">&lt;a-entity cursor position=&quot;0 0 -5&quot;&gt;&lt;/a-entity&gt;\n\n&lt;a-entity id=&quot;elmo&quot; geometry=&quot;primitive: box&quot; material=&quot;src: elmo.png&quot;\n          sound=&quot;src: url(ticklelaugh.mp3); on: click&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"preloading-a-sound-asset\">Preloading a Sound Asset</h2>\n<p>For performance, we recommend to block the scene on the sound asset to preload\nand cache. We can do so through the asset management system:</p>\n<pre><code class=\"language-html\">&lt;a-scene&gt;\n  &lt;a-assets&gt;\n    &lt;audio id=&quot;river&quot; src=&quot;river.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;\n  &lt;/a-assets&gt;\n\n  &lt;a-entity sound=&quot;src: #river&quot;&gt;&lt;/a-entity&gt;\n&lt;/a-scene&gt;</code></pre>\n<h2 id=\"pause-and-resume\">Pause and Resume</h2>\n<p>To programmatically pause or resume a playing sound, we can tell the entity to\npause or resume:</p>\n<pre><code class=\"language-js\">var entity = document.querySelector(&#39;[sound]&#39;);\nentity.components.sound.stopSound();</code></pre>\n<p>Or to pause only the sound:</p>\n<pre><code class=\"language-js\">entity.components.sound.pauseSound();</code></pre>\n<p>And to play the sound:</p>\n<pre><code class=\"language-js\">entity.components.sound.playSound();</code></pre>\n",
      "title": "sound",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/sound.js",
      "examples": [],
      "excerpt": "<p>The sound component defines the entity as a source of sound or audio. The sound\ncomponent is positional and is thus affected by the\n<a href=\"./position.md\">components-position</a>.</p>"
    },
    {
      "id": "stats",
      "contents": "<p>The stats component displays a UI with performance-related metrics. The stats\ncomponent applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene stats&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"metrics\">Metrics</h2>\n<ul>\n<li><strong>fps</strong>: frames per second, framerate. Aim for stable 90 fps with the WebVR 1.0 API.</li>\n<li><strong>requestAnimationFrame</strong> (raf): Latency.</li>\n<li><strong>Textures</strong>: number of three.js textures in the scene. A lower count means\nthe scene is using less memory and sending less data to the GPU.</li>\n<li><strong>Programs</strong>: number of GLSL shaders in the scene.</li>\n<li><strong>Geometries</strong>: number of three.js geometries in the scene. A lower count\nmeans the scene is using less memory.</li>\n<li><strong>Vertices</strong>: number of vertices in the scene.</li>\n<li><strong>Faces</strong>: number of faces in the scene.</li>\n<li><strong>Calls</strong>: number of draw calls on each frame.</li>\n<li><strong>Load Time</strong>: how long it took for the scene to start rendering, in ms.</li>\n<li><strong>Entities</strong>: number of A-Frame entities.</li>\n</ul>\n<h2 id=\"toggling-ui\">Toggling UI</h2>\n<p>Click or tap on the headings to collapse groups of metrics. If you tap\n&quot;Framerate&quot;, then <code>fps</code> and <code>raf</code> will collapse.</p>\n",
      "title": "stats",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/stats.js",
      "excerpt": "<p>The stats component displays a UI with performance-related metrics. The stats\ncomponent applies only to the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>.</p>"
    },
    {
      "id": "text",
      "contents": "<p>The text component renders signed distance field (SDF) font text.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/674727/22357731/f704544a-e3ee-11e6-8e6e-96c3c4e84958.png\" alt=\"Example Image\"></p>\n<!--toc-->\n\n<h2 id=\"introduction\">Introduction</h2>\n<p>Note that rendering text in 3D is hard. In 2D web development, text is the most\nbasic thing because the browser&#39;s renderer and layout engine handles\neverything. In a 3D context, we don&#39;t have those luxuries. There are several\nother different ways to render text in A-Frame including:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/aframe-text-geometry-component\">3D Text Geometry</a></li>\n<li><a href=\"https://github.com/mayognaise/aframe-html-shader\">HTML Materials (DOM-to-Canvas-to-Texture)</a></li>\n<li>Image Textures</li>\n</ul>\n<p>As a default, we&#39;ve selected SDF-based text to be included as a core component\ndue to its <strong>relatively good performance and clarity</strong>. This component uses\n<a href=\"https://github.com/Jam3/three-bmfont-text\">mattdesl&#39;s <code>three-bmfont-text</code> library</a>. The standard text\ncomponent has a long lineage, starting out as a community component and was\nforked and improved several times before landing into A-Frame!</p>\n<h2 id=\"example\">Example</h2>\n<p>Here&#39;s a basic example of text defining just the content with not much other\nconfiguration.</p>\n<pre><code class=\"language-html\">&lt;a-entity text=&quot;value: Hello World;&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>See more examples to see configuration of alignments, anchors, baselines,\nscaling, and auto-sizing.</p>\n<ul>\n<li><a href=\"https://a-frobot.github.io/aframe/examples/test/text/index.html\">Text Example</a> (<a href=\"https://github.com/aframevr/aframe/blob/master/examples/test/text/index.html\">code</a>)</li>\n<li><a href=\"https://a-frobot.github.io/aframe/examples/test/text/anchors.html\">Text Anchors</a> (<a href=\"https://github.com/aframevr/aframe/blob/master/examples/test/text/anchors.html\">code</a>)</li>\n<li><a href=\"https://a-frobot.github.io/aframe/examples/test/text/scenarios.html\">Text Scenarios</a> (<a href=\"https://github.com/aframevr/aframe/blob/master/examples/test/text/scenarios.html\">code</a>)</li>\n<li><a href=\"https://a-frobot.github.io/aframe/examples/test/text/sizes.html\">Text Sizes</a> (<a href=\"https://github.com/aframevr/aframe/blob/master/examples/test/text/sizes.html\">code</a>)</li>\n</ul>\n<p>Open any of these example scenes, hit <strong><code>&lt;ctrl&gt; + &lt;alt&gt; + i</code></strong> to open the\nInspector, and play with all the possible values to see the effects instantly!</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/674727/22358436/ea430ef4-e3f3-11e6-9dd9-e5e72e6e803a.png\" alt=\"Inspecting Text\"></p>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>Multi-line text alignment (left, center, right).</td>\n<td>left</td>\n</tr>\n<tr>\n<td>alphaTest</td>\n<td>Discard text pixels if alpha is less than this value.</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>anchor</td>\n<td>Horizontal positioning (left, center, right, align).</td>\n<td>center</td>\n</tr>\n<tr>\n<td>baseline</td>\n<td>Vertical positioning (top, center, bottom).</td>\n<td>center</td>\n</tr>\n<tr>\n<td>color</td>\n<td>Text color.</td>\n<td>white</td>\n</tr>\n<tr>\n<td>font</td>\n<td>Font to render text, either the name of one of <a href=\"#stock-fonts\">A-Frame&#39;s stock fonts</a> or a URL to a font file</td>\n<td>default</td>\n</tr>\n<tr>\n<td>fontImage</td>\n<td>Font image texture path to render text. Defaults to the <code>font</code>&#39;s name with extension replaced to <code>.png</code>. Don&#39;t need to specify if using a stock font.</td>\n<td><em>derived from font name</em></td>\n</tr>\n<tr>\n<td>height</td>\n<td>Height of text block.</td>\n<td><em>derived from text size</em></td>\n</tr>\n<tr>\n<td>letterSpacing</td>\n<td>Letter spacing in pixels.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>lineHeight</td>\n<td>Line height in pixels.</td>\n<td><em>derived from font file</em></td>\n</tr>\n<tr>\n<td>opacity</td>\n<td>Opacity, on a scale from 0 to 1, where 0 means fully transparent and 1 means fully opaque.</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>shader</td>\n<td>Shader used to render text.</td>\n<td>sdf</td>\n</tr>\n<tr>\n<td>side</td>\n<td>Side to render. (front, back, double)</td>\n<td>front</td>\n</tr>\n<tr>\n<td>tabSize</td>\n<td>Tab size in spaces.</td>\n<td>4</td>\n</tr>\n<tr>\n<td>transparent</td>\n<td>Whether text is transparent.</td>\n<td>true</td>\n</tr>\n<tr>\n<td><strong>value</strong></td>\n<td>The actual content of the text. Line breaks and tabs are supported with <code>\\n</code> and <code>\\t</code>.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>whiteSpace</td>\n<td>How whitespace should be handled (i.e., normal, pre, nowrap). <a href=\"https://github.com/mattdesl/word-wrapper\">Read more about whitespace</a>.</td>\n<td>normal</td>\n</tr>\n<tr>\n<td>width</td>\n<td>Width in meters.</td>\n<td><em>derived from geometry if exists</em></td>\n</tr>\n<tr>\n<td>wrapCount</td>\n<td>Number of characters before wrapping text (more or less).</td>\n<td>40</td>\n</tr>\n<tr>\n<td>wrapPixels</td>\n<td>Number of pixels before wrapping text.</td>\n<td><em>derived from wrapCount</em></td>\n</tr>\n<tr>\n<td>xOffset</td>\n<td>X-offset to apply to add padding.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>zOffset</td>\n<td>Z-offset to apply to avoid Z-fighting if using with a geometry as a background.</td>\n<td>0.001</td>\n</tr>\n</tbody></table>\n<p>The implementation is based on <a href=\"https://github.com/Jam3/three-bmfont-text\">mattdesl&#39;s three-bmfont-text</a>.\n<a href=\"https://github.com/Jam3/three-bmfont-text#usage\">Read more about the text properties</a>.</p>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>textfontset</td>\n<td>Emitted when the font source has been loaded</td>\n</tr>\n</tbody></table>\n<h2 id=\"fonts\">Fonts</h2>\n<p>We can specify different fonts, although the process is not as simple as Web\nFonts. The text component defaults to <code>roboto</code> which uses a multi-channel\nsigned distance (MSDF) font. MSDF helps to preserve sharp corners and edges.</p>\n<h3 id=\"stock-fonts\">Stock Fonts</h3>\n<p>Select from one of A-Frame&#39;s built-in fonts. These fonts will be loaded in from\nover a CDN. If you want your application to work better offline, download these\nfonts locally and point to them via a URL.</p>\n<table>\n<thead>\n<tr>\n<th>Stock MSDF Fonts</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>roboto</strong></td>\n<td><a href=\"https://cdn.aframe.io/fonts/Roboto-msdf.json\">https://cdn.aframe.io/fonts/Roboto-msdf.json</a></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Stock SDF Fonts</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>aileronsemibold</td>\n<td><a href=\"https://cdn.aframe.io/fonts/Aileron-Semibold.fnt\">https://cdn.aframe.io/fonts/Aileron-Semibold.fnt</a></td>\n</tr>\n<tr>\n<td>dejavu</td>\n<td><a href=\"https://cdn.aframe.io/fonts/DejaVu-sdf.fnt\">https://cdn.aframe.io/fonts/DejaVu-sdf.fnt</a></td>\n</tr>\n<tr>\n<td>exo2bold</td>\n<td><a href=\"https://cdn.aframe.io/fonts/Exo2Bold.fnt\">https://cdn.aframe.io/fonts/Exo2Bold.fnt</a></td>\n</tr>\n<tr>\n<td>exo2semibold</td>\n<td><a href=\"https://cdn.aframe.io/fonts/Exo2SemiBold.fnt\">https://cdn.aframe.io/fonts/Exo2SemiBold.fnt</a></td>\n</tr>\n<tr>\n<td>kelsonsans</td>\n<td><a href=\"https://cdn.aframe.io/fonts/KelsonSans.fnt\">https://cdn.aframe.io/fonts/KelsonSans.fnt</a></td>\n</tr>\n<tr>\n<td>monoid</td>\n<td><a href=\"https://cdn.aframe.io/fonts/Monoid.fnt\">https://cdn.aframe.io/fonts/Monoid.fnt</a></td>\n</tr>\n<tr>\n<td>mozillavr</td>\n<td><a href=\"https://cdn.aframe.io/fonts/mozillavr.fnt\">https://cdn.aframe.io/fonts/mozillavr.fnt</a></td>\n</tr>\n<tr>\n<td>sourcecodepro</td>\n<td><a href=\"https://cdn.aframe.io/fonts/SourceCodePro.fnt\">https://cdn.aframe.io/fonts/SourceCodePro.fnt</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"custom-fonts\">Custom Fonts</h3>\n<p>Different fonts can be specified using the <code>font</code> and <code>fontImage</code> properties.</p>\n<pre><code class=\"language-html\">&lt;a-entity text=&quot;font: mozillavr; value: Via stock font name.&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity text=&quot;font: https://cdn.aframe.io/fonts/mozillavr.fnt; value: Via URL.&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity text=&quot;text: Hello World; font: ../fonts/DejaVu-sdf.fnt; fontImage: ../fonts/DejaVu-sdf.png&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>If not specified, <code>fontImage</code> will be the <code>font</code>&#39;s name, but with the extension\nreplaced to <code>.png</code>. For example, if the <code>font</code> path ends with <code>mozillavr.fnt</code>,\nthen the <code>fontImage</code> texture will default to <code>mozillavr.png</code>.</p>\n<h3 id=\"generating-sdf-fonts\">Generating SDF Fonts</h3>\n<p>On top of the stock fonts, we can generate SDF fonts using <a href=\"https://github.com/libgdx/libgdx/wiki/Hiero\">Hiero</a>, a\nbitmap font packing tool. <a href=\"https://github.com/libgdx/libgdx/wiki/Distance-field-fonts\">See this guide for generating SDF fonts</a>.</p>\n<p>We can also generate MSDF fonts using <a href=\"http://msdf-bmfont.donmccurdy.com/\">a web-based MSDF tool</a>, or on the commandline with <a href=\"https://github.com/Chlumsky/msdfgen\">msdfgen</a> or <a href=\"https://github.com/Jam3/msdf-bmfont\">msdf-bmfont</a>. Tools for MSDF fonts may be less mature than the SDF alternatives.</p>\n<p>Below is an example comparing a font generated with Hiero, Arial Black, with\nthe SDF font, DejaVu:</p>\n<p><img src=\"http://i.imgur.com/iWtXHm5.png\" alt=\"Arial Black vs. Deja Vu\"></p>\n<h3 id=\"non-ascii-characters\">Non-ASCII Characters</h3>\n<p>To use non-ascii characters, you need to create your own custom font. The easiest way is to use <a href=\"http://msdf-bmfont.donmccurdy.com/\">a web-based MSDF tool</a>. Select your required character set and generate your own custom msdf font zip file.</p>\n<p>Once you download your custom msdf font zip file, extract it and rename <code>*.png</code> to <code>*-msdf.png</code>, then put both png and json files to your A-Frame directory.</p>\n<p>Lastly, you should specify the character set used in your HTML by using <code>&lt;meta&gt;</code> tag to avoid text to be garbled. If your text is garbled, it is not rendered.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;script src=&quot;https://aframe.io/releases/1.0.4/aframe.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a-scene&gt;\n      &lt;a-sky color=&quot;lightblue&quot;&gt;&lt;/a-sky&gt;\n      &lt;a-text value=&quot;ABCあいうえお日本語&quot; font=&quot;custom-msdf.json&quot; font-image=&quot;custom-msdf.png&quot; negate=&quot;false&quot; scale=&quot;2 2 1&quot; position=&quot;-2 2 -4&quot;&gt;&lt;/a-text&gt;\n    &lt;/a-scene&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<h2 id=\"sizing\">Sizing</h2>\n<p>To change the size of the text, we can:</p>\n<ul>\n<li>Change the <code>width</code>.</li>\n<li>Change the <code>wrapCount</code> (roughly how many characters to fit inside the given width).</li>\n<li>Change <code>wrapPixels</code>.</li>\n<li>Change the <a href=\"./scale.md\">scale component</a>.</li>\n<li><a href=\"./position.md\">Position</a> the text closer or farther away.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/674727/22358452/04528216-e3f4-11e6-8467-f03ac7f0e953.png\" alt=\"Sizing\"></p>\n<p>Text can be wrapped by specifying width in A-Frame units.</p>\n<p>In case we need to do custom layout or need to know the bounds of the text, the\noutput length of the text can be pre-calculated dynamically with something\nlike:</p>\n<pre><code>totalWidth = data.value.length * (data.width / data.wrapCount)</code></pre><h3 id=\"auto-scaling\">Auto-Scaling</h3>\n<p>The text component introduces special behavior when using alongside the\ngeometry component (e.g., a background plane) to fit. Note this only works with\n2D-friendly geometries that define a width and height (i.e., <code>box</code>, <code>plane</code>).\nThe text can either be scaled, bounded, or aligned in relation to the geometry,\nor the text can auto-scale the geometry to fit the text.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/674727/22358470/218689d6-e3f4-11e6-9e00-62c9cb7867da.png\" alt=\"Geometry Alignments\"></p>\n<h4 id=\"scaling-text-to-fit-geometry\">Scaling Text to Fit Geometry</h4>\n<p>To have the text component&#39;s <code>width</code> property automatically scale to match the\ngeometry component&#39;s <code>width</code>, do not specify a <code>width</code> for the text component:</p>\n<pre><code class=\"language-html\">&lt;a-entity\n  geometry=&quot;primitive: plane; width: 4; height: auto&quot;\n  material=&quot;color: blue&quot;\n  text=&quot;value: This text will be 4 units wide.&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h4 id=\"scaling-geometry-to-fit-text\">Scaling Geometry to Fit Text</h4>\n<p>To have the geometry automatically scale with the text, set the geometry\ncomponent&#39;s <code>width</code> and <code>height</code> properties to <code>auto</code>, and set the text\ncomponent&#39;s <code>width</code> as desired. In this example, the plane&#39;s <code>width</code> will be\nset to 4 units, and its <code>height</code> will be set to match the actual height of the\ntext:</p>\n<pre><code class=\"language-html\">&lt;a-entity\n  geometry=&quot;primitive: plane; height: auto; width: auto&quot;\n  material=&quot;color: blue&quot;\n  text=&quot;width: 4; value: This text will be 4 units wide.&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<p>Note that if neither <code>geometry</code> nor <code>text</code> specify a width, the text <code>width</code>\nproperty will default to 1 unit (meter), and the geometry <code>width</code> property will\nthen become 1 unit as well.</p>\n<pre><code class=\"language-html\">&lt;a-entity\n  geometry=&quot;primitive: plane&quot;\n  material=&quot;color: blue&quot;\n  text=&quot;value: 1-wide\\ndefault.&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"limitations\">Limitations</h2>\n<p>The text component does not make use of all of the features of the\n<a href=\"https://github.com/Jam3/three-bmfont-text\"><code>three-bmfont-text</code> library</a> nor its sister modules.</p>\n<p>Bitmap font rendering limits you to the characters included in the font\n(<em>Unicode this is not</em>). SDF font rendering tends to produce smooth sharp edges\n<a href=\"https://lambdacube3d.wordpress.com/2014/11/12/playing-around-with-font-rendering/\">though there are ways around this</a>.</p>\n<p>The generated text is not suitable for raycaster intersection testing. For raycaster or cursor detection it is necessary to use a geometry component along with the text component.</p>\n<h2 id=\"further-reading\">Further Reading</h2>\n<p>If you are curious about the details of text rendering in WebGL, three.js, and\nA-Frame, below are links to some background reading:</p>\n<ul>\n<li><a href=\"https://github.com/Jam3/three-bmfont-text\"><code>three-bmfont-text</code> documentation</a></li>\n<li><a href=\"http://slides.com/mattdeslauriers/hacking-with-three-js#/7\"><em>Hacking with three.js</em></a></li>\n<li><a href=\"https://www.eventbrite.com/engineering/its-2015-and-drawing-text-is-still-hard-webgl-threejs/\"><em>It&#39;s 2015 and drawing text is still hard (WebGL, ThreeJS)</em></a></li>\n<li><a href=\"http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf\"><em>Improved Alpha-Tested Magnification for Vector Textures and Special Effects</em></a></li>\n</ul>\n",
      "title": "text",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/text.js",
      "examples": [],
      "excerpt": "<p>The text component renders signed distance field (SDF) font text.</p>"
    },
    {
      "id": "tracked-controls",
      "contents": "<p>The tracked-controls component interfaces with tracked controllers.\ntracked-controls uses the Gamepad API to handle tracked controllers, and is\nabstracted by the <a href=\"./hand-controls.md\">hand-controls component</a> as well as the\n<a href=\"./vive-controls.md\">vive-controls</a>, <a href=\"./oculus-touch-controls.md\">oculus-touch-controls</a>,\n<a href=\"./windows-motion-controls.md\">windows-motion-controls</a>, and <a href=\"./daydream-controls.md\">daydream-controls</a>\ncomponents. This component elects the appropriate controller, applies pose to\nthe entity, observes buttons state and emits appropriate events.  For non-6DOF controllers\nsuch as <a href=\"./daydream-controls.md\">daydream-controls</a>, a primitive arm model is used to emulate\npositional data.</p>\n<p>tracked-controls sets two components that handles different Web API versions for VR:</p>\n<ul>\n<li>tracked-controls-webvr</li>\n<li>tracked-controls-webxr</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p>Note that due to recent browser-specific changes, Vive controllers may be returned\nby the Gamepad API with id values of either &quot;OpenVR Gamepad&quot; or &quot;OpenVR Controller&quot;,\nso using idPrefix for Vive / OpenVR controllers is recommended.</p>\n<pre><code class=\"language-html\">&lt;a-entity tracked-controls=&quot;controller: 0; idPrefix: OpenVR&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>armModel</td>\n<td>Whether the arm model is used for positional data if absent.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>autoHide</td>\n<td>Whether to toggle visibility automatically when controller is connected or disconnected.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>controller</td>\n<td>Index of the controller in array returned by the Gamepad API.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>id</td>\n<td>Selects the controller from the Gamepad API using exact match.</td>\n<td></td>\n</tr>\n<tr>\n<td>idPrefix</td>\n<td>Selects the controller from the Gamepad API using prefix match.</td>\n<td></td>\n</tr>\n<tr>\n<td>headElement</td>\n<td>Head element for arm model if needed (if not active camera).</td>\n<td></td>\n</tr>\n<tr>\n<td>hand</td>\n<td>Which hand to use, if arm model is needed.  (left negates X)</td>\n<td>right</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>controllerconnected</td>\n<td>Controller connected and set up.</td>\n</tr>\n<tr>\n<td>controllerdisconnected</td>\n<td>Controller disconnected.</td>\n</tr>\n<tr>\n<td>axismove</td>\n<td>Axis changed (e.g., for thumbstick, touchpad). Contains <code>axis</code> and <code>axesChanged</code> in the event detail. <code>axis</code> is an array of values from <code>-1.0</code> (left, down) to <code>1.0</code> (right, up).</td>\n</tr>\n<tr>\n<td>buttonchanged</td>\n<td>Any touch or press of a button fires this.</td>\n</tr>\n<tr>\n<td>buttondown</td>\n<td>Button pressed.</td>\n</tr>\n<tr>\n<td>buttonup</td>\n<td>Button released.</td>\n</tr>\n<tr>\n<td>touchstart</td>\n<td>Touch sensitive button touched.</td>\n</tr>\n<tr>\n<td>touchend</td>\n<td>Touch sensitive button released.</td>\n</tr>\n</tbody></table>\n<h3 id=\"more-resources\">More Resources</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\">Gamepad API</a> - W3C Gamepad API</li>\n<li><a href=\"https://github.com/ValveSoftware/openvr/wiki/API-Documentation\">OpenVR</a> - OpenVR Documentation</li>\n</ul>\n",
      "title": "tracked-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/tracked-controls.js",
      "examples": [],
      "excerpt": "<p>The tracked-controls component interfaces with tracked controllers.\ntracked-controls uses the Gamepad API to handle tracked controllers, and is\nabstracted by the <a href=\"./hand-controls.md\">hand-controls component</a> as well as the\n<a href=\"./vive-controls.md\">vive-controls</a>, <a href=\"./oculus-touch-controls.md\">oculus-touch-controls</a>,\n<a href=\"./windows-motion-controls.md\">windows-motion-controls</a>, and <a href=\"./daydream-controls.md\">daydream-controls</a>\ncomponents. This component elects the appropriate controller, applies pose to\nthe entity, observes buttons state and emits appropriate events.  For non-6DOF controllers\nsuch as <a href=\"./daydream-controls.md\">daydream-controls</a>, a primitive arm model is used to emulate\npositional data.</p>"
    },
    {
      "id": "visible",
      "contents": "<p>The visible component determines whether to render an entity. If set to\n<code>false</code>, then the entity will not be visible nor drawn.</p>\n<p>Visibility effectively applies to all children. If an entity&#39;s parent or\nancestor entity has visibility set to false, then the entity will also not be\nvisible nor draw.  It&#39;s a common pattern to create container entities that\ncontain an entire group of entities that you can flip on an off with <code>visible</code>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity visible=&quot;false&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>true</td>\n<td>The entity will be rendered and visible; the default value.</td>\n</tr>\n<tr>\n<td>false</td>\n<td>The entity will not be rendered nor visible. The entity will still exist in the scene.</td>\n</tr>\n</tbody></table>\n<h2 id=\"updating-visibility\">Updating Visibility</h2>\n<p>It is slightly faster to update visibility at the three.js level versus <a href=\"../introduction/javascript-events-and-dom-apis.md#updating-a-component-with-setattribute\">via\n<code>.setAttribute</code></a>.</p>\n<pre><code class=\"language-js\">// With three.js\nel.object3D.visible = false;\n\n// With .setAttribute.\nel.setAttribute(&#39;visible&#39;, false);</code></pre>\n<p>Updates at the three.js level will still be reflected when doing\n<code>entityEl.getAttribute(&#39;visible&#39;);</code>.</p>\n<h2 id=\"hiding-entity-until-texture-loaded\">Hiding Entity Until Texture Loaded</h2>\n<p>While we can do this with the <a href=\"https://github.com/supermedium/superframe/tree/master/components/event-set\">event-set</a> component, we can also do\nthis with the built-in animation component. Here&#39;s an example of updating\nvisibility on an event.</p>\n<pre><code class=\"language-html\">&lt;!-- Wait 1 second before showing the entity. --&gt;\n&lt;a-entity\n  animation=&quot;property: visible; to: true; startEvents: materialtextureloaded&quot;&gt;&lt;/a-entity&gt;\n  material=&quot;src: #myTexture&quot;\n  visible=&quot;false&quot;&gt;</code></pre>\n",
      "title": "visible",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/visible.js",
      "examples": [],
      "excerpt": "<p>The visible component determines whether to render an entity. If set to\n<code>false</code>, then the entity will not be visible nor drawn.</p>"
    },
    {
      "id": "vive-controls",
      "contents": "<p>The vive-controls component interfaces with the HTC Vive controllers/wands. It\nwraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Vive controller model that highlights the pressed\nbuttons (trigger, grip, menu, system) and trackpad.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity vive-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity vive-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>buttonColor</td>\n<td>Button colors when not pressed.</td>\n<td>#FAFAFA (off-white)</td>\n</tr>\n<tr>\n<td>buttonHighlightColor</td>\n<td>Button colors when pressed and active.</td>\n<td>#22D1EE (light blue)</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>The hand that will be tracked (i.e., right, left).</td>\n<td>left</td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the Vive controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gripdown</td>\n<td>Grip button pressed.</td>\n</tr>\n<tr>\n<td>gripup</td>\n<td>Grip button released.</td>\n</tr>\n<tr>\n<td>gripchanged</td>\n<td>Grip button changed.</td>\n</tr>\n<tr>\n<td>menudown</td>\n<td>Menu button pressed.</td>\n</tr>\n<tr>\n<td>menuup</td>\n<td>Menu button released.</td>\n</tr>\n<tr>\n<td>menuchanged</td>\n<td>Menu button changed.</td>\n</tr>\n<tr>\n<td>systemdown</td>\n<td>System button pressed.</td>\n</tr>\n<tr>\n<td>systemup</td>\n<td>System button released.</td>\n</tr>\n<tr>\n<td>systemchanged</td>\n<td>System button changed.</td>\n</tr>\n<tr>\n<td>trackpaddown</td>\n<td>Trackpad pressed.</td>\n</tr>\n<tr>\n<td>trackpadup</td>\n<td>Trackpad released.</td>\n</tr>\n<tr>\n<td>trackpadchanged</td>\n<td>Trackpad button changed.</td>\n</tr>\n<tr>\n<td>triggerdown</td>\n<td>Trigger pressed.</td>\n</tr>\n<tr>\n<td>triggerup</td>\n<td>Trigger released.</td>\n</tr>\n<tr>\n<td>triggerchanged</td>\n<td>Trigger changed.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><a href=\"https://cdn.aframe.io/controllers/vive/vr_controller_vive.obj\">Controller OBJ</a></li>\n<li><a href=\"https://cdn.aframe.io/controllers/vive/vr_controller_vive.mtl\">Controller MTL</a></li>\n</ul>\n",
      "title": "vive-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/vive-controls.js",
      "examples": [],
      "excerpt": "<p>The vive-controls component interfaces with the HTC Vive controllers/wands. It\nwraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a Vive controller model that highlights the pressed\nbuttons (trigger, grip, menu, system) and trackpad.</p>"
    },
    {
      "id": "vive-focus-controls",
      "contents": "<p>The vive-focus-controls component interfaces with the Vive Focus controller.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and an Vive Focus controller model that highlights the touched\nand/or pressed buttons (trackpad, trigger).</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;!-- Match Vive Focus controller if present, regardless of hand. --&gt;\n&lt;a-entity vive-focus-controls&gt;&lt;/a-entity&gt;\n\n&lt;!-- Match Vive Focus controller if present and for specified hand. --&gt;\n&lt;a-entity vive-focus-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity vive-focus-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>armModel</td>\n<td>Whether the arm model is used for positional data.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>buttonTouchedColor</td>\n<td>Button colors when touched (Trackpad only).</td>\n<td>#777777</td>\n</tr>\n<tr>\n<td>buttonHighlightColor</td>\n<td>Button colors when pressed and active.</td>\n<td>#FFFFFF</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>The hand that will be tracked (e.g., right, left).</td>\n<td></td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the Vive Focus controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>orientationOffset</td>\n<td>Offset to apply to model orientation.</td>\n<td>x: 0, y: 0, z: 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trackpadchanged</td>\n<td>Trackpad changed.</td>\n</tr>\n<tr>\n<td>trackpaddown</td>\n<td>Trackpad pressed.</td>\n</tr>\n<tr>\n<td>trackpadmoved</td>\n<td>Trackpad axis changed.</td>\n</tr>\n<tr>\n<td>trackpadup</td>\n<td>Trackpad released.</td>\n</tr>\n<tr>\n<td>trackpadtouchstart</td>\n<td>Trackpad touched.</td>\n</tr>\n<tr>\n<td>trackpadtouchend</td>\n<td>Trackpad not touched.</td>\n</tr>\n<tr>\n<td>triggerchanged</td>\n<td>Trigger changed.</td>\n</tr>\n<tr>\n<td>triggerdown</td>\n<td>Trigger pressed.</td>\n</tr>\n<tr>\n<td>triggerup</td>\n<td>Trigger released.</td>\n</tr>\n</tbody></table>\n<p>As this controller&#39;s buttons are digital, the changed events only fire when\na button is fully pressed or released (value 0 or 1).</p>\n<h2 id=\"assets\">Assets</h2>\n<ul>\n<li><a href=\"https://cdn.aframe.io/controllers/vive/focus-controller/focus-controller.gltf\">Controller GLTF</a></li>\n</ul>\n",
      "title": "vive-focus-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/vive-focus-controls.js",
      "examples": [],
      "excerpt": "<p>The vive-focus-controls component interfaces with the Vive Focus controller.\nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and an Vive Focus controller model that highlights the touched\nand/or pressed buttons (trackpad, trigger).</p>"
    },
    {
      "id": "vr-mode-ui",
      "contents": "<p>The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility\nmodal, and orientation modal for mobile. The vr-mode-ui component applies only\nto the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>. If we wish to simply toggle the UI, use CSS instead.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-scene vr-mode-ui=&quot;enabled: false&quot;&gt;&lt;/a-scene&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>enabled</td>\n<td>Whether or not to display UI related to entering VR.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>enterVRButton</td>\n<td>Selector to a custom VR button. On click, the button will enter VR.</td>\n<td>&#39;&#39;</td>\n</tr>\n<tr>\n<td>enterARButton</td>\n<td>Selector to a custom AR button. On click, the button will enter AR.</td>\n<td>&#39;&#39;</td>\n</tr>\n</tbody></table>\n<h3 id=\"specifying-a-custom-enter-vr-button\">Specifying a Custom Enter VR Button</h3>\n<pre><code class=\"language-html\">&lt;a-scene\n  vr-mode-ui=&quot;enterVRButton: #myEnterVRButton; enterARButton: #myEnterARButton&quot;&gt;\n  &lt;!-- Style the button with images or whatever. --&gt;\n  &lt;a id=&quot;myEnterVRButton&quot; href=&quot;#&quot;&gt;&lt;/a&gt;\n  &lt;a id=&quot;myEnterARButton&quot; href=&quot;#&quot;&gt;&lt;/a&gt;\n&lt;/a-scene&gt;</code></pre>\n",
      "title": "vr-mode-ui",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/scene/vr-mode-ui.js",
      "excerpt": "<p>The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility\nmodal, and orientation modal for mobile. The vr-mode-ui component applies only\nto the <a href=\"../core/scene.md\"><code>&lt;a-scene&gt;</code> element</a>. If we wish to simply toggle the UI, use CSS instead.</p>"
    },
    {
      "id": "wasd-controls",
      "contents": "<p>The wasd-controls component controls an entity with the WASD or arrow keyboard\nkeys. The wasd-controls component is commonly attached to an entity with the <a href=\"./camera.md\">camera\ncomponent</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity camera look-controls wasd-controls=&quot;acceleration:100&quot; position=&quot;0 1.6 0&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>acceleration</td>\n<td>How fast the entity accelerates when holding the keys.</td>\n<td>65</td>\n</tr>\n<tr>\n<td>adAxis</td>\n<td>Axis that the <code>A</code> and <code>D</code> keys act upon.</td>\n<td>x</td>\n</tr>\n<tr>\n<td>adInverted</td>\n<td>Whether the axis that the <code>A</code> and <code>D</code> keys act upon are inverted.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>Whether the WASD controls are enabled.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>fly</td>\n<td>Whether or not movement is restricted to the entity&#39;s initial plane.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>wsAxis</td>\n<td>Axis that the <code>W</code> and <code>S</code> keys act upon.</td>\n<td>z</td>\n</tr>\n<tr>\n<td>wsInverted</td>\n<td>Whether the axis that the W and S keys act upon are inverted.</td>\n<td>false</td>\n</tr>\n</tbody></table>\n",
      "title": "wasd-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/wasd-controls.js",
      "excerpt": "<p>The wasd-controls component controls an entity with the WASD or arrow keyboard\nkeys. The wasd-controls component is commonly attached to an entity with the <a href=\"./camera.md\">camera\ncomponent</a>.</p>"
    },
    {
      "id": "windows-motion-controls",
      "contents": "<p>The windows-motion-controls component interfaces with any spatial controllers exposed through\nWindows Mixed Reality as Spatial Input Sources (such as Motion Controllers). \nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a controller model that highlights applies position/rotation transforms \nto the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-html\">&lt;a-entity windows-motion-controls=&quot;hand: left&quot;&gt;&lt;/a-entity&gt;\n&lt;a-entity windows-motion-controls=&quot;hand: right&quot;&gt;&lt;/a-entity&gt;</code></pre>\n<h2 id=\"value\">Value</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hand</td>\n<td>The hand that will be tracked (i.e., right, left).</td>\n<td>right</td>\n</tr>\n<tr>\n<td>pair</td>\n<td>Which pair of controllers, if &gt; 2 are connected.</td>\n<td>0</td>\n</tr>\n<tr>\n<td>model</td>\n<td>Whether the controller model is loaded.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>hideDisconnected</td>\n<td>Disable rendering of controller model when no matching gamepad (based on ID &amp; hand) is connected.</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h2 id=\"events\">Events</h2>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>thumbstickdown</td>\n<td>Thumbstick button pressed.</td>\n</tr>\n<tr>\n<td>thumbstickup</td>\n<td>Thumbstick button released.</td>\n</tr>\n<tr>\n<td>thumbstickchanged</td>\n<td>Thumbstick button changed.</td>\n</tr>\n<tr>\n<td>thumbstickmoved</td>\n<td>Thumbstick axis moved.</td>\n</tr>\n<tr>\n<td>triggerdown</td>\n<td>Trigger pressed.</td>\n</tr>\n<tr>\n<td>triggerup</td>\n<td>Trigger released.</td>\n</tr>\n<tr>\n<td>triggerchanged</td>\n<td>Trigger changed.</td>\n</tr>\n<tr>\n<td>gripdown</td>\n<td>Grip button pressed.</td>\n</tr>\n<tr>\n<td>gripup</td>\n<td>Grip button released.</td>\n</tr>\n<tr>\n<td>gripchanged</td>\n<td>Grip button changed.</td>\n</tr>\n<tr>\n<td>menudown</td>\n<td>Menu button pressed.</td>\n</tr>\n<tr>\n<td>menuup</td>\n<td>Menu button released.</td>\n</tr>\n<tr>\n<td>menuchanged</td>\n<td>Menu button changed.</td>\n</tr>\n<tr>\n<td>trackpaddown</td>\n<td>Trackpad pressed.</td>\n</tr>\n<tr>\n<td>trackpadup</td>\n<td>Trackpad released.</td>\n</tr>\n<tr>\n<td>trackpadchanged</td>\n<td>Trackpad button changed.</td>\n</tr>\n<tr>\n<td>trackpadmoved</td>\n<td>Trackpad axis moved.</td>\n</tr>\n<tr>\n<td>controllermodelready</td>\n<td>The model file is loaded and completed parsing.</td>\n</tr>\n</tbody></table>\n<h2 id=\"assets\">Assets</h2>\n<p>TBC.</p>\n",
      "title": "windows-motion-controls",
      "type": "components",
      "layout": "docs",
      "parent_section": "components",
      "source_code": "src/components/windows-motion-controls.js",
      "examples": [],
      "excerpt": "<p>The windows-motion-controls component interfaces with any spatial controllers exposed through\nWindows Mixed Reality as Spatial Input Sources (such as Motion Controllers). \nIt wraps the <a href=\"./tracked-controls.md\">tracked-controls component</a> while adding button\nmappings, events, and a controller model that highlights applies position/rotation transforms \nto the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)</p>"
    }
  ]
}
